<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>shengdoupi&#39;s</title>
  
  <subtitle>posts</subtitle>
  <link href="http://shengdoupi.github.io/atom.xml" rel="self"/>
  
  <link href="http://shengdoupi.github.io/"/>
  <updated>2024-05-30T17:23:12.491Z</updated>
  <id>http://shengdoupi.github.io/</id>
  
  <author>
    <name>shengdoupi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【simple-spring】Bean 容器实现</title>
    <link href="http://shengdoupi.github.io/2024/01/04/spring-ioc/"/>
    <id>http://shengdoupi.github.io/2024/01/04/spring-ioc/</id>
    <published>2024-01-04T04:59:42.408Z</published>
    <updated>2024-05-30T17:23:12.491Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>实践出真知</strong> – 如果真想从 spring 中学到东西，你一定要动手写一个自己的 spring。</p><p>大家好，我是 mengzhishang，上面是我写完这两篇文章后的感悟，像很多人一样，我也断断续续看过一些 spring 的原理，大多是 Bean 的生命周期介绍，三层缓存解决循环依赖这些，坦白的说很难去记忆和理解。因为 spring 的设计具有极强的广度（领域划分）和深度（设计模式），<strong>想从“管”中窥得 “spring” 这个豹真的很难</strong>。</p><p>下定决心手撸这个 simple-spring 真的要感谢<strong>小傅哥</strong>，他的系列文章让一切变得简单和可能。如果只是对着 spring-framework 这个代码库去手写一个 spring 是极难的，因为你不知道要在哪里做非核心功能的取舍，也比较难去领悟 spring 颇多设计的巧妙。然而结合文档再去看源码，手写一个只有核心功能的版本，对大多数人来说是可接受的。</p><p><strong>取自开源，回报以开源</strong>。整个 simple-spring 是在小傅哥的【<a href="https://bugstack.cn/md/spring/develop-spring/2021-05-16-%E7%AC%AC1%E7%AB%A0%EF%BC%9A%E5%BC%80%E7%AF%87%E4%BB%8B%E7%BB%8D%EF%BC%8C%E6%89%8B%E5%86%99Spring%E8%83%BD%E7%BB%99%E4%BD%A0%E5%B8%A6%E6%9D%A5%E4%BB%80%E4%B9%88%EF%BC%9F.html">spring 手撸专栏</a>】基础上重新实现，框架设计几乎没有变化，和小傅哥原作的主要差异点：</p><ul><li>对本人在学习和实践该专栏的过程中一些不解和设计上觉得有些跳跃的地方进行了个人见解的补充和层次设计；</li><li>每个大模块都进行了原创的<strong>图形化</strong>解释，帮助自己和读者更直观地理解；</li><li>代码对接口和方法提供了简化版的<strong>全英文注释</strong>，可以更好体会 spring-framework 设计者的最初想法；</li><li><strong>AOP 模块</strong>和小傅哥的原文内容有较大差别；文章从 AOP Alliance 接口框架开始讲解，模块实现更接近 Spring；</li><li>代码仓库每个分支对应一个文章章节，更方便 spring 学习者们参考<strong>对应分支学习</strong>和实践；</li></ul><p><strong>建议</strong>：学习过程中理解某个类或者方法的功能时，最好根据名称去 spring-framework 中查看一遍注释和源码，而不是只看文中简单版的实现；</p><p><strong>仓库地址</strong>：<a href="https://github.com/shengdoupi/simple-spring/branches">https://github.com/shengdoupi/simple-spring/branches</a></p><p><strong>整体结构</strong>：本系列文章我们将分四个部分介绍，分别是两部分 spring 最核心的基础能力：<strong>Bean 容器</strong>和 <strong>AOP</strong>，以及 spring 在面向用户友好的演进中体感最明显的<strong>注解化</strong>能力，最后一部分我将介绍自己在公司做启动耗时优化专项时对 spring 做的<strong>Bean 加载优化</strong>工作。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b57e711b675d43c58391fd69826a385b~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=924&h=708&s=46118&e=png&a=1&b=ffffff" alt="spring.png"></p><p><strong>IoC</strong>（Inversion of Control）是控制反转。控制反转是种设计思想，在学习设计模式时我们知道：控制反转指的是框架代替用户控制程序，主要是利用了抽象的思想，系统层次之间不依赖具体而是依赖抽象。在使用时通过多态实现框架的灵活性；</p><p>Spring 中处处可见 IoC 思想（这也造就了其框架的定位），本节我们将从 spring 中对象创建的控制反转学习起。相比于程序通过new来主动创建对象，Spring将对象创建和管理的权利交给了<strong>容器</strong>，容器在程序运行时动态的创建对象和维护对象之间的关系。在实现时，这种和用户硬编码的解耦可以通过配置或者注解来实现。</p><h1 id="01-创建一个Bean容器"><a href="#01-创建一个Bean容器" class="headerlink" title="01 创建一个Bean容器"></a>01 创建一个Bean容器</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p><strong>Spring Bean</strong></p><p>Bean是指一个由Spring容器管理的对象，该对象的创建、销毁等生命周期完全交给容器管理，优势是将对象的创建和管理和业务逻辑分离。</p><p><strong>Spring Bean容器</strong></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c991b9709204403a83b5733e635c7d88~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1426&h=846&s=83378&e=png&a=1&b=ffffff" alt="spring-01.png"></p><p>Bean 容器的基本功能就是提供获取 Bean 的能力，这一章主要就 Spring 如何完整的获取一个 Bean 做学习和实践，主要包括了 Bean 的注册、创建（实例化、属性注入）和获取。其中，框架在控制反转的思想基础上，利用了大量设计模式去铺垫框架的可扩展能力，包括模版方法模式、策略模式；也按照功能职责做了细致的模块和层次划分，个人认为是高内聚低耦合的思想体现。</p><p>这一 part 的具体实现基本和<strong>小傅哥原文一致</strong>，因此介绍的比较简单直接。</p><h2 id="1-实现一个最简单的Bean容器"><a href="#1-实现一个最简单的Bean容器" class="headerlink" title="1 实现一个最简单的Bean容器"></a>1 实现一个最简单的Bean容器</h2><p>分支：<a href="https://github.com/shengdoupi/simple-spring/tree/simplest_bean_container">https://github.com/shengdoupi/simple-spring/tree/simplest_bean_container</a></p><p>由Bean的定义可知，Bean 容器是用来管理 Bean 对象的，容器需要通过一些元数据来知悉如何管理这个 Bean ，比如如何被实例化等，我们把这些元数据看作是 Bean 的定义。当一个 Bean 被定义好后，交给Spring Bean 容器统一创建、使用和销毁。</p><p>因此，一个 Bean 容器需要具有定义 Bean、依据定义注册 Bean 和获取 Bean 的能力。我们按照下述方法实现一个简单的 Bean 容器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.shengdoupi.ioc;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/3/21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Bean definition.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanDefinition</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Class beanClass;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BeanDefinition</span><span class="params">(Class beanClass)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.beanClass = beanClass;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Class <span class="title function_">getBeanClass</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.beanClass;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanClass</span><span class="params">(Class beanClass)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.beanClass = beanClass;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义：令 BeanDefinition 作为 Bean 的元数据文件；其中包含 Bean 对应的类 Class 文件，用于创建实例；默认约束 Bean 为单例，即容器中只能有一个实例。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.shengdoupi.ioc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/3/21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanFactory</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, BeanDefinition&gt; beanDefinitionMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; singletonObjects = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Register bean definition.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinition</span><span class="params">(String beanName, BeanDefinition beanDefinition)</span> &#123;</span><br><span class="line">        beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get singleton bean.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(String beanName)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">singletonObject</span> <span class="operator">=</span> singletonObjects.get(beanName);</span><br><span class="line">        <span class="keyword">if</span> (singletonObject != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> singletonObject;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> beanDefinitionMap.get(beanName);</span><br><span class="line">        singletonObject = createBean(beanDefinition);</span><br><span class="line">        singletonObjects.put(beanName, singletonObject);</span><br><span class="line">        <span class="keyword">return</span> singletonObject;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create singleton bean.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">createBean</span><span class="params">(BeanDefinition beanDefinition)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">beanObject</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            beanObject = beanDefinition.getBeanClass().newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> beanObject;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> beanObject;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>注册：将 BeanDefinition 注册到容器中；</li><li>获取：从容器中依据类名获取 Bean 实例，如果没有则先创建单例实例，如果有则直接返回单例实例；我们可以使用 HashMap 来存储单例。</li></ul><h2 id="2-实现模块划分更清晰的Bean容器"><a href="#2-实现模块划分更清晰的Bean容器" class="headerlink" title="2 实现模块划分更清晰的Bean容器"></a>2 实现模块划分更清晰的Bean容器</h2><p>分支：<a href="https://github.com/shengdoupi/simple-spring/tree/spring_designed_bean_container">https://github.com/shengdoupi/simple-spring/tree/spring_designed_bean_container</a></p><p>相比于我们上述的设计，Spring 设计了一套通过继承、封装做了更清晰的模块划分的容器架构，包括：</p><ol><li>引入单例对象注册表，定义单例对象的注册、获取方法;</li><li>引入 BeanDefinition 注册表，定义 BeanDefinition 的注册方法。</li><li>使用模版方法模式，定义 AbstractBeanFactory 抽象工厂类，规范了获取 Bean 的模版流程，但对涉及的具体方法不做实现，留给子类实现；</li><li>在子类 AbstractAutowireCapableBeanFactory 中实现 createBean 方法；</li><li>在 DefaultListableBeanFactory 类中，新增 BeanDefinition 注册、获取方法的实现，是一个基本成熟的 Bean 工厂；</li></ol><p>具体的模块如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.beans.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.github.shengdoupi.springframework.beans.BeansException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/3/26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Bean factory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanFactory</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get bean.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">getBean</span><span class="params">(String beanName)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>BeanFactory: 接口, 规范获取 Bean 的方法 getBean();</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.beans.factory.config;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/3/26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SingletonBeanRegistry</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get singleton.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">getSingleton</span><span class="params">(String beanName)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SingletonBeanRegistry: 接口，规范管理单例 Bean 对象的方法，定义 getSingleton() ；<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.beans.factory.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/3/26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultSingletonBeanRegistry</span> <span class="keyword">implements</span> <span class="title class_">SingletonBeanRegistry</span> &#123;</span><br><span class="line">    Map&lt;String, Object&gt; singletonObjects = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getSingleton</span><span class="params">(String beanName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> singletonObjects.get(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addSingleton</span><span class="params">(String beanName, Object singletonObject)</span> &#123;</span><br><span class="line">        singletonObjects.put(beanName, singletonObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>DefaultSingletonBeanRegistry: 通用管理单例 bean 实例的类，实现 SingletonBeanRegistry 接口，实现了 getSingleton() 和 addSingleton() 方法；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.beans.factory.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/3/26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractBeanFactory</span> <span class="keyword">extends</span> <span class="title class_">DefaultSingletonBeanRegistry</span> <span class="keyword">implements</span> <span class="title class_">BeanFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(String beanName)</span> <span class="keyword">throws</span> BeansException&#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> getSingleton(beanName);</span><br><span class="line">        <span class="keyword">if</span> (bean != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> bean;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> getBeanDefinition(beanName);</span><br><span class="line">        <span class="keyword">return</span> creatBean(beanName, beanDefinition);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get bean definition.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> BeanDefinition <span class="title function_">getBeanDefinition</span><span class="params">(String beanName)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create bean.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> Object <span class="title function_">creatBean</span><span class="params">(String beanName, BeanDefinition beanDefinition)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>AbstractBeanFactory: 实现 BeanFactory 的抽象类，使用模版方法模式，通过给定的 Bean 定义获取 Bean 实例的通用模版方法 getBean()；定义了通过 Bean 名称获取 Bean 定义的抽象方法 getBeanDefinition()， 以及通过继承 DefaultSingletonBeanRegistry，提供了单例 Bean 实例的管理机制；<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.beans.factory.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/3/26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Abstract autowire capable bean factory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractAutowireCapableBeanFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractBeanFactory</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">creatBean</span><span class="params">(String beanName, BeanDefinition beanDefinition)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bean = beanDefinition.getBeanClass().newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException exception) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Create bean from bean definition exception.&quot;</span>, exception);</span><br><span class="line">        &#125;</span><br><span class="line">        addSingleton(beanName, bean);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>AbstractAutowireCapableBeanFactory：抽象类继承自 AbstractBeanFactory，主要实现了getBean() 内创建 Bean 实例的方法 createBean()；<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.beans.factory.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.github.shengdoupi.springframework.beans.factory.config.BeanDefinition;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/3/27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanDefinitionRegistry</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Register bean definition.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">registerBeanDefinition</span><span class="params">(String beanName, BeanDefinition beanDefinition)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>BeanDefinitionRegistry: BeanDefinition 的注册表接口，主要定义了 BeanDefinition 的注册方法registerBeanDefinition();</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.beans.factory.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/3/26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Default listable bean factory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultListableBeanFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractAutowireCapableBeanFactory</span> <span class="keyword">implements</span> <span class="title class_">BeanDefinitionRegistry</span> &#123;</span><br><span class="line">    </span><br><span class="line">    Map&lt;String, BeanDefinition&gt; beanDefinitionMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> BeanDefinition <span class="title function_">getBeanDefinition</span><span class="params">(String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> beanDefinitionMap.get(beanName);</span><br><span class="line">        <span class="keyword">if</span> (beanDefinition == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Bean definition null exception.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> beanDefinitionMap.get(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinition</span><span class="params">(String beanName, BeanDefinition beanDefinition)</span> &#123;</span><br><span class="line">        beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>DefaultListableBeanFactory: 继承了AbstractAutowireCapableBeanFactory, 同时实现BeanDefinitionRegistry接口，实现了registerBeanDefinition()，是一个成熟的基于BeanDefinition元数据的Bean管理容器；</li></ul><h2 id="3-引入实例化策略"><a href="#3-引入实例化策略" class="headerlink" title="3 引入实例化策略"></a>3 引入实例化策略</h2><p>分支：<a href="https://github.com/shengdoupi/simple-spring/tree/instantiation_strategy">https://github.com/shengdoupi/simple-spring/tree/instantiation_strategy</a></p><p>上述DefaultListableBeanFactory虽然已经是一个可以注册、创建和获取的Bean工厂，但一个很大的局限是可以管理的Bean只能是无参构造函数实例化得到的。如果Bean对应的类包含有参构造函数，Bean工厂要如何在创建Bean时通过有参构造函数进行实例化呢？</p><ul><li>Java反射生成</li></ul><p>Java反射可以通过getDeclaredConstructor()或getConstructor()方法，依据入参类型获取对应的构造器，进一步使用构造器的newInstance()方法创建对象；</p><p>Spring基于上述方案提供了两个实例化策略：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.beans.factory.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Simple instantiation strategy.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleInstantiationStrategy</span> <span class="keyword">implements</span> <span class="title class_">InstantiationStrategy</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">instantiate</span><span class="params">(BeanDefinition beanDefinition, String beanName, Constructor&lt;?&gt; ctor, Object... args)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instantiateClass(ctor, args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">instantiateClass</span><span class="params">(Constructor&lt;?&gt; ctor, Object... args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == ctor) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Constructor must not be null&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            ctor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">parameterCount</span> <span class="operator">=</span> ctor.getParameterCount();</span><br><span class="line">            <span class="keyword">if</span> (parameterCount == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> ctor.newInstance();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ctor.newInstance(args);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException | InstantiationException | IllegalAccessException e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Instantiate exception.&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SimpleInstantiationStrategy，利用反射实现通过有参构造函数的实例化；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.beans.factory.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Cglib subclassing instantiation strategy.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CglibSubclassingInstantiationStrategy</span> <span class="keyword">implements</span> <span class="title class_">InstantiationStrategy</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">instantiate</span><span class="params">(BeanDefinition beanDefinition, String beanName, Constructor&lt;?&gt; ctor, Object... args)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == ctor) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Constructor must not be null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">        enhancer.setSuperclass(beanDefinition.getBeanClass());</span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> <span class="title class_">NoOp</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">super</span>.hashCode();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == ctor.getParameterCount()) &#123;</span><br><span class="line">            <span class="keyword">return</span> enhancer.create();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> enhancer.create(ctor.getParameterTypes(), args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>CglibSubclassingInstantiationStrategy，利用Cglib框架动态创建对象，Cglib是一个封装了ASM可以操纵字节码的框架。在Spring的设计考虑中，主要是利用Cglib动态生成子类的能力，实现实例化时支持方法重写，从命名中也能发现端倪。CglibSubclassingInstantiationStrategy继承自SimpleInstantiationStrategy，只是实现了定义在SimpleInstantiationStrategy中的支持方法重写的实例化抽象方法。</li></ul><p>在simple-spring中，不提供支持方法重写的实例化功能。CglibSubclassingInstantiationStrategy作为一个和SimpleInstantiationStrategy平行的类，两者同样实现自InstantiationStrategy接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.beans.factory.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Abstract autowire capable bean factory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractAutowireCapableBeanFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractBeanFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">InstantiationStrategy</span> <span class="variable">instantiationStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CglibSubclassingInstantiationStrategy</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">creatBean</span><span class="params">(String beanName, BeanDefinition beanDefinition, Object... args)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        ...</span><br><span class="line">        bean = createBeanInstance(beanName, beanDefinition, args);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Instantialize bean.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">createBeanInstance</span><span class="params">(String beanName, BeanDefinition beanDefinition, Object... args)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="comment">// Get constructor.</span></span><br><span class="line">        Class&lt;?&gt; beanClass = beanDefinition.getBeanClass();</span><br><span class="line">        Constructor&lt;?&gt;[] ctors = beanClass.getDeclaredConstructors();</span><br><span class="line">        Object[] argsToUse = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">ctorToUse</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != args) &#123;</span><br><span class="line">            argsToUse = args;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            argsToUse = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; ctor : ctors) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ctor.getParameterCount() == argsToUse.length) &#123;</span><br><span class="line">                ctorToUse = ctor;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Instantiation.</span></span><br><span class="line">        <span class="keyword">return</span> instantiationStrategy.instantiate(beanDefinition, beanName, ctorToUse, argsToUse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>在 Bean 工厂中引入实例化策略；</li></ul><p><strong>实现过程中发现cglib不支持JDK17, 可以通过将编译工具改为JDK1.8</strong>。</p><h2 id="4-属性注入"><a href="#4-属性注入" class="headerlink" title="4 属性注入"></a>4 属性注入</h2><p>分支：<a href="https://github.com/shengdoupi/simple-spring/tree/populate_bean">https://github.com/shengdoupi/simple-spring/tree/populate_bean</a></p><p>Bean内部包含属性时，如果该属性本身也是Bean容器托管的Bean，如何将该属性注入到Bean对象中呢？</p><p>首先，容器需要知道一个Bean包含哪些属性，这个可以通过BeanDefinition来声明；</p><p>其次，在Bean实例化后，我们依据BeanDefinition中的声明依次将依赖的属性从Bean容器中取出，注入到Bean属性中；那么Spring如何实现？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.beans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.istack.internal.NotNull;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Property value.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PropertyValue</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> Object value;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PropertyValue</span><span class="params">(String name, Object value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义PropertyValue类，本质是一个k-v，用来在定义BeanDefinition时，存储属性的名称和Bean引用;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.beans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Property value.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PropertyValues</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;PropertyValue&gt; propertyValues = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addPropertyValue</span><span class="params">(PropertyValue propertyValue)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.propertyValues.add(propertyValue);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> PropertyValue[] getPropertyValues() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.propertyValues.toArray(<span class="keyword">new</span> <span class="title class_">PropertyValue</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义PropertyValues类，存储PropertyValue列表，至于为什么不直接用一个Map类型来存储，Spring中给的解释是List可以维护顺序，便于按照顺序执行属性注入。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.beans.factory.config;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanReference</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Return the target bean name this reference points to.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">getBeanName</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>定义BeanReference接口，表示对Bean名称的引用，作为PropertyValue里的v，可以用于表示该属性对应的Bean对象名称。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.beans.factory.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Abstract autowire capable bean factory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractAutowireCapableBeanFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractBeanFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">InstantiationStrategy</span> <span class="variable">instantiationStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CglibSubclassingInstantiationStrategy</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">creatBean</span><span class="params">(String beanName, BeanDefinition beanDefinition, Object... args)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bean = createBeanInstance(beanName, beanDefinition, args);</span><br><span class="line">            applyPropertyValues(beanDefinition, beanName, bean);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Instantiate bean failed.&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        addSingleton(beanName, bean);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">applyPropertyValues</span><span class="params">(BeanDefinition beanDefinition, String beanName, Object bean)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">PropertyValues</span> <span class="variable">propertyValues</span> <span class="operator">=</span> beanDefinition.getPropertyValues();</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == propertyValues) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (PropertyValue propertyValue : propertyValues.getPropertyValues()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> propertyValue.getName();</span><br><span class="line">                <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> propertyValue.getValue();</span><br><span class="line">                <span class="keyword">if</span> (value <span class="keyword">instanceof</span> BeanReference) &#123;</span><br><span class="line">                    <span class="type">BeanReference</span> <span class="variable">beanReference</span> <span class="operator">=</span> (BeanReference) propertyValue.getValue();</span><br><span class="line">                    value = getBean(beanReference.getBeanName());</span><br><span class="line">                &#125;</span><br><span class="line">                setFieldValue(beanName, bean, name, value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Apply property values error&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(String beanName, Object bean, String propertyName, Object propertyValue)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> getBeanDefinition(beanName).getBeanClass();</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(propertyName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field.set(bean, propertyValue);</span><br><span class="line">        &#125; <span class="keyword">catch</span> ( NoSuchFieldException | SecurityException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Reflection get field error &quot;</span> + beanName, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> ( IllegalArgumentException | IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Reflection set field value error&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实例化时，如果一个对象有Bean对象作为的属性，那么从Bean工厂获取该Bean对象属性，通过反射进行填充；获取Bean对象属性时，通过递归的方式由下向上实例化Bean。</li><li>我们暂时不考虑循环依赖的问题。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>目前为止，我们已经拥有了一个功能完备的 Bean 工厂，包括 BeanDefinition 的注册、Bean 的实例化、Bean 的属性注入。但现在的能力范围让我们在使用时有很多局限性，比如：</p><ol><li>要想注册一个 Bean，首先需要通过代码来创建一个 BeanDefinition 对象，使用者要写大量 new 的代码，注册一个 Bean 较为繁琐，要想注册多个 Bean 那就更难为使用者了；</li><li>作为一个框架，扩展点是很需要的，使用者可能需要在一个定义好的 Bean 的获取流程中，做一些修改操作；</li><li>我们发现使用者对 Bean 工厂的使用流程是非常一致的：注册 BeanDefinition、创建 Bean 、一些扩展能力，当然还有获取 Bean，除了获取 Bean 外，其他的流程可以抽象出一个模版出来，每次有变更时（比如BeanDefinition修改、扩展能力新增等），自动走一遍这个模版，然后使用者只需不断调用 getBean(“xx”) 即可；</li></ol><h1 id="02-配置化、自动化和扩展能力"><a href="#02-配置化、自动化和扩展能力" class="headerlink" title="02 配置化、自动化和扩展能力"></a>02 配置化、自动化和扩展能力</h1><p>第一章我们实现了 Bean 工厂最基本的功能：管理 Bean。但在单元测试时我们发现使用起来和真正的 Spring 体验差距有点太大：</p><ul><li>注册一个 Bean 需要手写好多代码，都比我每次 new 对象都复杂，能否通过配置化实现呢？</li><li>从 Bean 的注册到获取使用者要多次和 BeanFactory 进行交互，需要使用者理解 Spring 的内部逻辑，能否通过自动化流程使得对使用者更黑盒一些？</li><li>正如开头讲的一样，在实现的过程中可以发现 Spring 的设计处处为扩展能力做了铺垫，包括多种设计模式的使用、模块的层次划分等；那么在 Spring 的设计目标中，究竟为 Bean 工厂做了哪些能力的扩展呢？</li></ul><p>这一章我们就 Spring 中这三个问题的答案进行学习和实践。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8f59d0725e1b47f9919a2fd97ecce5fc~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1743&h=1160&s=167931&e=png&a=1&b=ffffff" alt="spring-02 (1).png"></p><h2 id="1-资源加载器解析文件注册对象"><a href="#1-资源加载器解析文件注册对象" class="headerlink" title="1 资源加载器解析文件注册对象"></a>1 资源加载器解析文件注册对象</h2><p>分支：<a href="https://github.com/shengdoupi/simple-spring/tree/resource_loader">https://github.com/shengdoupi/simple-spring/tree/resource_loader</a></p><p><strong>目标</strong></p><p>考虑一个问题：如何将我们需要管理的Bean以配置的形式，交付给BeanFactory管理？而不是显式的在代码里去注册BeanDefinitoin.</p><p>Spring中提供了XML文件的形式对Bean进行配置，我们需要一个对Bean配置的读取、解析和使用的模块。</p><p><strong>设计</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.core.io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Resource</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Resource</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get resource input stream.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    InputStream <span class="title function_">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.core.io;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Resource loader.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ResourceLoader</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">CLASSPATH_URL_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;classpath:&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get resource.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> location</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Resource.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Resource <span class="title function_">getResource</span><span class="params">(String location)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>为了实现资源加载器对XML文件进行读取和加载，Spring中定义了接口Resource和ResourceLoader对资源和资源加载进行规范。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.core.io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Class path resource.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassPathResource</span> <span class="keyword">implements</span> <span class="title class_">Resource</span> &#123;</span><br><span class="line">    String path;</span><br><span class="line">    </span><br><span class="line">    ClassLoader classLoader;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClassPathResource</span><span class="params">(String path)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(path, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClassPathResource</span><span class="params">(String path, ClassLoader classLoader)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.path = path;</span><br><span class="line">        <span class="built_in">this</span>.classLoader = classLoader;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> InputStream <span class="title function_">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> classLoader.getResourceAsStream(path);</span><br><span class="line">        <span class="keyword">return</span> is;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.core.io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Default resource loader.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultResourceLoader</span> <span class="keyword">implements</span> <span class="title class_">ResourceLoader</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Resource <span class="title function_">getResource</span><span class="params">(String location)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (location.startsWith(CLASSPATH_URL_PREFIX)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(location.substring(CLASSPATH_URL_PREFIX.length()));</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>具体对资源加载器的实现，Spring中提供了 ClassPath、系统文件和URL文件类型资源的具体实现，并在DefaultResourceLoader中做具体的调用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.beans.factory.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Xml bean definition reader.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XmlBeanDefinitionReader</span> <span class="keyword">extends</span> <span class="title class_">AbstractBeanDefinitionReader</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loadBeanDefinitions</span><span class="params">(Resource resource)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            doLoadBeanDefinitions(resource.getInputStream(), resource);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Get input stream error&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loadBeanDefinitions</span><span class="params">(String location)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> getResourceLoader().getResource(location);</span><br><span class="line">        loadBeanDefinitions(resource);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doLoadBeanDefinitions</span><span class="params">(InputStream inputStream, Resource resource)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// parse doc</span></span><br><span class="line">            <span class="type">Document</span> <span class="variable">doc</span> <span class="operator">=</span> XMLUtils.read(inputStream);</span><br><span class="line">            <span class="type">Element</span> <span class="variable">root</span> <span class="operator">=</span> doc.getDocumentElement();</span><br><span class="line">            <span class="type">NodeList</span> <span class="variable">childNodes</span> <span class="operator">=</span> root.getChildNodes();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; childNodes.getLength(); ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!(childNodes.item(i) <span class="keyword">instanceof</span> Element)) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="string">&quot;bean&quot;</span>.equals(childNodes.item(i).getNodeName())) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// parse element</span></span><br><span class="line">                <span class="type">Element</span> <span class="variable">bean</span> <span class="operator">=</span> (Element) childNodes.item(i);</span><br><span class="line">                <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> bean.getAttribute(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> bean.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> bean.getAttribute(<span class="string">&quot;class&quot;</span>);</span><br><span class="line">                <span class="comment">// get clazz</span></span><br><span class="line">                Class&lt;?&gt; clazz = Class.forName(className);</span><br><span class="line">                <span class="comment">// beanName</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> StringUtils.isNotBlank(id) ? id : name;</span><br><span class="line">                <span class="comment">// BeanDefinition</span></span><br><span class="line">                <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanDefinition</span>(clazz);</span><br><span class="line">                <span class="type">NodeList</span> <span class="variable">beanChildNodes</span> <span class="operator">=</span> bean.getChildNodes();</span><br><span class="line">                <span class="type">PropertyValues</span> <span class="variable">propertyValues</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PropertyValues</span>();</span><br><span class="line">                beanDefinition.setPropertyValues(propertyValues);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; beanChildNodes.getLength(); ++j) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!(beanChildNodes.item(j) <span class="keyword">instanceof</span> Element)) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!<span class="string">&quot;property&quot;</span>.equals(beanChildNodes.item(j).getNodeName())) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// parse property</span></span><br><span class="line">                    <span class="type">Element</span> <span class="variable">property</span> <span class="operator">=</span> (Element) beanChildNodes.item(j);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">attrName</span> <span class="operator">=</span> property.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">attrValue</span> <span class="operator">=</span> property.getAttribute(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">attrRef</span> <span class="operator">=</span> property.getAttribute(<span class="string">&quot;ref&quot;</span>);</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> StringUtils.isNotBlank(attrRef) ? (BeanReference) () -&gt; attrRef : attrValue;</span><br><span class="line">                    propertyValues.addPropertyValue(<span class="keyword">new</span> <span class="title class_">PropertyValue</span>(attrName, value));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (getRegistry().containsBeanDefinition(beanName)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Duplicate bean name: &quot;</span> + beanName);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Register bean definition.</span></span><br><span class="line">                getRegistry().registerBeanDefinition(beanName, beanDefinition);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Load bean definition error&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>加载资源后，对资源的使用主要包括：解析获得BeanDefinition，并注册到容器的注册表中。Spring定义了BeanDefinitionReader接口、抽象类AbstractBeanDefinitionReader、实现类XmlBeanDefinitionReader，分别定义了接口功能、非接口功能外的注册Bean组件填充，以及具体的业务实现。</li></ul><h2 id="2-应用上下文实现"><a href="#2-应用上下文实现" class="headerlink" title="2 应用上下文实现"></a>2 应用上下文实现</h2><p>分支：<a href="https://github.com/shengdoupi/simple-spring/tree/resource_loader">https://github.com/shengdoupi/simple-spring/tree/resource_loader</a></p><p><strong>目标</strong></p><p>目前为止我们在使用simple-spring时，注册和获得一个Bean需要和simple-spring做两次交互，即XmlBeanDefinitionReader读取配置和注册Bean，以及DefaultListableBeanFactory获取Bean；</p><p>我们知道，Spring提供了一些可扩展能力，比如BeanFactoryPostProcessor和BeanPostProcessor接口，用户实现这两个接口的逻辑，Spring即可在注册、实例化Bean时执行用户扩展的逻辑。</p><p>那当我们使用了扩展接口时，在一次注册和获取Bean的过程中和Spring的交互变为了四次；显然，频繁的和框架交互是非用户友好的，用户需要感知Spring太多的内部逻辑。因此，我们需要一个入口，从入口处触发 Spring 扫描、解析、注册和实例化，以及执行扩展能力，屏蔽掉用户对 Spring 内部逻辑的感知。在 Spring 中，这个入口即是应用上下文。</p><p><strong>设计</strong></p><ul><li>BeanFactoryPostProcessor：扩展接口，在Bean注册到BeanFactory后修改Bean的定义；</li><li>BeanPostProcessor：扩展接口，在Bean实例化后修改Bean实例，甚至可以替换Bean对象；</li><li>ApplicationContext：Spring IoC 的上下文操作类，将Bean定义的加载、解析、注册和Bean的实例化，以及过程中的扩展能力执行都融到内部，让用户只需和它交互而不用感知 IoC 的内部逻辑。</li></ul><p>在实现上述功能前，我们首先按照spring的结构新增一些配置类，主要包括：</p><ul><li>给BeanFactory新增依据名称和指定类型获取Bean的方法:  <T> T getBean(String beanName, Class<T> requiredType), 并在AbstractBeanFactory中做相应模版实现；</li><li>HierarchicalBeanFactory: 在spring中被作为层次Bean工厂，提供了获取parent工厂的方法，以及判断本地工厂是否包含某个bean的方法，simple-spring不涉及层次Bean工厂，因此这里不做定义；</li><li>ListableBeanFactory：可列举全部bean实例的BeanFactory，而不是只能通过beanName去获取指定bean实例。提供了包括获取工厂内全部已注册Bean名称的方法，以及指定bean类型下全部bean实例的功能；</li><li>ConfigurableBeanFactory：配置接口，simple-spring在该接口定义addBeanPostProcessor方法；</li><li>AutowireCapableBeanFactory: 配置接口，为实现了该接口的BeanFactory提供了自动注入的能力；提供了包括指定类型创建新Bean，对已实例化的bean自动注入Bean属性等方法；</li><li>ConfigurableListableBeanFactory：配置接口，大部分可列举bean工厂需要实现的接口。</li></ul><p><strong>实现</strong></p><ol><li>创建 BeanFactoryPostProcessor 接口，定义 postProcessBeanFactory 方法；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/4/27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Factory hook that allows for custom modification of an application context&#x27;s bean definitions.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanFactoryPostProcessor</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Modify the application context&#x27;s bean factory after its standard initialization.</span></span><br><span class="line"><span class="comment">     * All bean definitions has been loaded, but no bean has been instantiated yet.</span></span><br><span class="line"><span class="comment">     * This allows overriding or adding properties for beans&#x27; definition.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法在 ApplicationContext 中被触发，在BeanDefinition加载完成后、Bean实例化之前，修改或重写BeanDefinition属性；</p><ol start="2"><li>定义BeanPostProcessor接口；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/4/27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Factory hook that allows for custom modification of new bean instances.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Modify a bean before its initialization.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">default</span> Object <span class="title function_">postProcessBeanBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Modigy a bean after its initialization.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">default</span> Object <span class="title function_">postProcessBeanAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个接口提供了修改实例化Bean对象的能力，分别定义了在Bean初始化方法执行之前和之后修改Bean的方法。在 ApplicationContext 中，当 Bean 实例化之后，初始化之前被执行；</p><ol start="3"><li>定义上下文接口；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2024/4/27</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> Central interface to provide configuration for an application.</span></span><br><span class="line"><span class="comment">     * An application context provides:</span></span><br><span class="line"><span class="comment">     * 1. Bean factory methods for accessing application components.</span></span><br><span class="line"><span class="comment">     * 2. The ability to load file resources.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">ListableBeanFactory</span>, HierarchicalBeanFactory, ResourceLoader &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">上下文接口是对一个程序提供Bean配置的中心接口，它继承了BeanFactory和ResourceLoader，从而可以提供获取应用内 component（即bean）的方法，以及资源加载的能力。</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2024/4/27</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment">     * Provides facilities to configure an application context in addition to the application context client methods</span></span><br><span class="line"><span class="comment">     * in ApplicationContext interface.</span></span><br><span class="line"><span class="comment">     * Configuration  and lifecycle methods are encapsulated here.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ConfigurableApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">ApplicationContext</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Load or refresh the persistent representation of the configuration.</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>ApplicationContext负责提供和用户交互的方法， ConfigurableApplicationContext 则负责封装不需要对用户暴露的上下文方法，比如容器配置的刷新和生命周期相关方法。核心是 refresh 方法负责刷新容器，即容器配置的重新加载、注册和 Bean 的创建。</p><ol start="4"><li>应用上下文抽象类实现</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/4/27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">DefaultResourceLoader</span> <span class="keyword">implements</span> <span class="title class_">ConfigurableApplicationContext</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 创建 BeanFactory 并加载BeanDefinition</span></span><br><span class="line">            refreshBeanFactory();</span><br><span class="line">            <span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> getBeanFactory();</span><br><span class="line">            <span class="comment">// 2. Bean 实例化之前, 调用BeanFactoryPostProcessors</span></span><br><span class="line">            invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line">            <span class="comment">// 3. 注册 BeanPostProcessor</span></span><br><span class="line">            registerBeanPostProcessors(beanFactory);</span><br><span class="line">            <span class="comment">// 4. 完成实例化单例Bean</span></span><br><span class="line">            finishBeanFactoryInitialization(beanFactory);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Application context refresh error&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create bean factory, and load bean definitions.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">refreshBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> ConfigurableListableBeanFactory <span class="title function_">getBeanFactory</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Instantiate and invoke all registered BeanFactoryPostProcessor beans</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanFactory</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">invokeBeanFactoryPostProcessors</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> &#123;</span><br><span class="line">        Map&lt;String, BeanFactoryPostProcessor&gt; beans = beanFactory.getBeansOfType(BeanFactoryPostProcessor.class);</span><br><span class="line">        <span class="keyword">for</span> (BeanFactoryPostProcessor postProcessor : beans.values()) &#123;</span><br><span class="line">            postProcessor.postProcessBeanFactory(beanFactory);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">registerBeanPostProcessors</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> &#123;</span><br><span class="line">        Map&lt;String, BeanPostProcessor&gt; beans = beanFactory.getBeansOfType(BeanPostProcessor.class);</span><br><span class="line">        <span class="keyword">for</span> (BeanPostProcessor beanPostProcessor : beans.values()) &#123;</span><br><span class="line">            beanFactory.addBeanPostProcessor(beanPostProcessor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finishBeanFactoryInitialization</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> &#123;</span><br><span class="line">        <span class="comment">// 完成实例化单例Bean</span></span><br><span class="line">        beanFactory.preInstantiateSingletons();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(String name, Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">return</span> getBeanFactory().getBean(name, requiredType);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>依旧是模版方法模式，在 AbstractApplicationContext 里定义了 refresh 方法的流程，包括：</p><ul><li>创建一个新的 BeanFactory（先不实现）</li><li>执行 BeanFactoryPostProcessor 扩展逻辑（实现）</li><li>将 BeanPostProcessor 注册到 BeanFactory 的 beanPostProcessors 列表中；（实现）</li><li>执行单例 Bean 的实例化等一系列创建操作；（实现，但核心逻辑由BeanFactory执行）</li></ul><p>此外，AbstractApplicationContext 还定义了 refreshBeanFactory()、getBeanFactory() 这些和具体 BeanFactory 相关的操作，交由后续继承者们实现；AbstractApplicationContext 继承了 DefaultResourceLoader，用于在刷新 BeanFactory 时执行资源加载相关的操作；</p><ol start="5"><li>创建新的 BeanFactory 并自动“刷新” 执行包括 BeanDefinition 资源加载、和注册的操作；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractRefreshableApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">AbstractApplicationContext</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> DefaultListableBeanFactory beanFactory;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">refreshBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> createBeanFactory();</span><br><span class="line">        loadBeanDefinitions(beanFactory);</span><br><span class="line">        <span class="built_in">this</span>.beanFactory = beanFactory;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> DefaultListableBeanFactory <span class="title function_">createBeanFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultListableBeanFactory</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Load bean definitions into the given bean factory, typically through</span></span><br><span class="line"><span class="comment">     * delegating to one or more bean definition readers.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">loadBeanDefinitions</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConfigurableListableBeanFactory</span>  <span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.beanFactory;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现了 refreshBeanFactory 方法，包括：</p><ul><li>创建一个 DefaultListableBeanFactory 实例，并实现了getBeanFactory 方法；</li><li>定义了 BeanDefinition 的加载方法，交由子类中具体的资源加载器去实现，在其中执行 BeanDefinition 的加载和注册，包括对扩展接口 BeanFactoryPostProcessor 和 BeanPostProcessor 的实现类进行 BeanDefinition 的注册；</li></ul><ol start="6"><li>实现对配置信息的加载</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/4/27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractXmlApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">AbstractRefreshableApplicationContext</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">loadBeanDefinitions</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">XmlBeanDefinitionReader</span> <span class="variable">xmlBeanDefinitionReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XmlBeanDefinitionReader</span>(beanFactory, <span class="built_in">this</span>);</span><br><span class="line">        String[] configLocations = getConfigLocations();</span><br><span class="line">        xmlBeanDefinitionReader.loadBeanDefinitions(configLocations);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get bean definition config locations.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> String[]  ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仰仗 BeanDefinitionReader 的接口实现类来执行对配置信息的加载，在 AbstractXmlApplicationContext 中的 loadBeanDefinitions 方法实现中，实例化了一个 XmlBeanDefinitionReader 对象，调用它的 loadBeanDefinitions 方法来执行对特定资源路径的加载；同时，定义了getConfigLocations 方法，子类依据文件的类别来做具体实现；</p><ol start="7"><li>应用上下文实现类，通过传入一个资源路径，并自动触发执行应用上下文的全逻辑；</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class ClassPathXmlApplicationContext extends AbstractXmlApplicationContext&#123;</span><br><span class="line">    private String[] configLocations;</span><br><span class="line">    </span><br><span class="line">    public ClassPathXmlApplicationContext(String configLocation) &#123;</span><br><span class="line">        this(new String[]&#123;configLocation&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public ClassPathXmlApplicationContext(String[] configLocations) &#123;</span><br><span class="line">        this.configLocations = configLocations;</span><br><span class="line">        refresh();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public String[] getConfigLocations() &#123;</span><br><span class="line">        return this.configLocations;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该实现类中定义了资源路径的属性，并在构造方法中对资源路径进行赋值，然后触发 refresh 方法；</p><ol start="8"><li>Bean创建时执行初始化的前置、后置逻辑</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/3/26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Abstract autowire capable bean factory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractAutowireCapableBeanFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractBeanFactory</span> <span class="keyword">implements</span> <span class="title class_">AutowireCapableBeanFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">InstantiationStrategy</span> <span class="variable">instantiationStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CglibSubclassingInstantiationStrategy</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">creatBean</span><span class="params">(String beanName, BeanDefinition beanDefinition, Object... args)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建Bean实例</span></span><br><span class="line">            bean = createBeanInstance(beanName, beanDefinition, args);</span><br><span class="line">            <span class="comment">// 属性注入</span></span><br><span class="line">            applyPropertyValues(beanDefinition, beanName, bean);</span><br><span class="line">            <span class="comment">// 新增：初始化Bean</span></span><br><span class="line">            initializeBean(beanName, bean, beanDefinition);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Instantiate bean failed.&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        addSingleton(beanName, bean);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Instantialize bean.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanDefinition</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">createBeanInstance</span><span class="params">(String beanName, BeanDefinition beanDefinition, Object... args)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="comment">// Get constructor.</span></span><br><span class="line">        Class&lt;?&gt; beanClass = beanDefinition.getBeanClass();</span><br><span class="line">        Constructor&lt;?&gt;[] ctors = beanClass.getDeclaredConstructors();</span><br><span class="line">        Object[] argsToUse = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">ctorToUse</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != args) &#123;</span><br><span class="line">            argsToUse = args;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            argsToUse = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; ctor : ctors) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ctor.getParameterCount() == argsToUse.length) &#123;</span><br><span class="line">                ctorToUse = ctor;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Instantiation.</span></span><br><span class="line">        <span class="keyword">return</span> instantiationStrategy.instantiate(beanDefinition, beanName, ctorToUse, argsToUse);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">applyPropertyValues</span><span class="params">(BeanDefinition beanDefinition, String beanName, Object bean)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">PropertyValues</span> <span class="variable">propertyValues</span> <span class="operator">=</span> beanDefinition.getPropertyValues();</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == propertyValues) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (PropertyValue propertyValue : propertyValues.getPropertyValues()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> propertyValue.getName();</span><br><span class="line">                <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> propertyValue.getValue();</span><br><span class="line">                <span class="keyword">if</span> (value <span class="keyword">instanceof</span> BeanReference) &#123;</span><br><span class="line">                    <span class="type">BeanReference</span> <span class="variable">beanReference</span> <span class="operator">=</span> (BeanReference) propertyValue.getValue();</span><br><span class="line">                    value = getBean(beanReference.getBeanName());</span><br><span class="line">                &#125;</span><br><span class="line">                setFieldValue(beanName, bean, name, value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Apply property values error&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(String beanName, Object bean, String propertyName, Object propertyValue)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> getBeanDefinition(beanName).getBeanClass();</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(propertyName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field.set(bean, propertyValue);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException | SecurityException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Reflection get field error &quot;</span> + beanName, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException | IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Reflection set field value error&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">initializeBean</span><span class="params">(String beanName, Object bean, BeanDefinition beanDefinition)</span> &#123;</span><br><span class="line">        <span class="comment">// 执行初始化前的自定义扩展方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">wrappedBean</span> <span class="operator">=</span> applyBeanPostProcessorsBeforeInitialization(bean, beanName);</span><br><span class="line">        <span class="comment">// 执行初始化方法</span></span><br><span class="line">        invokeInitMethods(beanName, bean, beanDefinition);</span><br><span class="line">        <span class="comment">// 执行初始化后的自定义扩展方法</span></span><br><span class="line">        wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class="line">        <span class="keyword">return</span> wrappedBean;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">invokeInitMethods</span><span class="params">(String beanName, Object bean, BeanDefinition beanDefinition)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">applyBeanPostProcessorsBeforeInitialization</span><span class="params">(Object existingBean, String beanName)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> existingBean;</span><br><span class="line">        <span class="keyword">for</span> (BeanPostProcessor postProcessor : getBeanPostProcessors()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">current</span> <span class="operator">=</span> postProcessor.postProcessBeanBeforeInitialization(result, beanName);</span><br><span class="line">            <span class="keyword">if</span> (current == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">            result = current;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">applyBeanPostProcessorsAfterInitialization</span><span class="params">(Object existingBean, String beanName)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> existingBean;</span><br><span class="line">        <span class="keyword">for</span> (BeanPostProcessor postProcessor : getBeanPostProcessors()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">current</span> <span class="operator">=</span> postProcessor.postProcessBeanAfterInitialization(result, beanName);</span><br><span class="line">            <span class="keyword">if</span> (current == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">            result = current;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Spring 中，Bean创建包括三个步骤：实例化、属性注入和初始化；</p><p><strong>实例化和初始化的区别</strong>：</p><p>「<strong>实例化</strong>」：实例化是创建类的实例的过程。在Spring中，当一个Bean被定义在配置文件中（或者通过其他方式如注解或Java配置），Spring IoC容器就会实例化这个Bean。实例化通常通过调用类的无参数构造函数来完成。这个步骤产生了一个Bean的实例，但是这个实例的属性尚未被设置。</p><p>「<strong>初始化</strong>」：初始化是在Bean实例化后、使用前的一个阶段，主要是对Bean进行一些定制化的设置，比如设置属性的值、执行某些方法等。在Spring中，你可以通过实现InitializingBean接口，或者使用@PostConstruct注解，或者在XML配置中定义&lt;bean init-method&#x3D;””&gt;，来定义Bean的初始化逻辑（后面我们会解释）。</p><p>那么我们自定义的 BeanPostProcessor 就是在 Bean 实例化和属性注入之后，在初始化之前和之后分别执行 applyBeanPostProcessorsBeforeInitialization 和 applyBeanPostProcessorsAfterInitialization 方法，这两个方法定义在 AutowireCapableBeanFactory 中；</p><p>以 applyBeanPostProcessorsBeforeInitialization 为例：具体执行逻辑为把 BeanFactory 中注册到 beanPostProcessors 列表里的 BeanPostProcessor 实例，执行 postProcessBeanBeforeInitialization 方法，直到返回为空，这时候扩展逻辑执行结束，返回 wrappedBean 即可。</p><p><strong>一些总结</strong></p><p>到这里为止，我们可以发现在 Spring 中，接口、抽象类的职责和层次划分非常清晰，每层继承后只增加了“原子”的功能，提供了高度自由的能力组合，最终落到实现类身上供用户使用。一个应用上下文主要包含了三个职责：Bean 工厂的创建和配置读取、Bean 的创建、以及将全流程串起来自动执行的模版方法；</p><h2 id="3-初始化和销毁方法的扩展"><a href="#3-初始化和销毁方法的扩展" class="headerlink" title="3 初始化和销毁方法的扩展"></a>3 初始化和销毁方法的扩展</h2><p>分支：<a href="https://github.com/shengdoupi/simple-spring/tree/init_and_destroy_method">https://github.com/shengdoupi/simple-spring/tree/init_and_destroy_method</a></p><p>前面我们在 Bean 实例化和属性注入之后有一个初始化的过程，这个初始化方法前后我们也留了扩展点(BeanPostProcessor). 那么 Bean 的初始化到底是什么呢？</p><p>Bean 初始化：我们希望在 Bean的实例化、属性注入这些基本创建流程完成后，但在 Bean 被获取使用之前，执行一些逻辑；比如，当我们一个缓存客户端类的 Bean 被实例化之后，我们希望在使用这个客户端之前，一些缓存已经被加载，这时我们可以在这个类中定义一个加载缓存的方法，通过在初始化方法中执行该方法来实现缓存的提前加载；</p><p>因此，初始化方法本质上也是一个 Bean工厂 提供的扩展点，框架需要定义接口来实现扩展点的执行，使用者通过实现接口来定义具体的执行逻辑；</p><p>Bean 的销毁也一样，框架通过接口作为扩展点，使用者实现接口来定义销毁时需要执行的逻辑，大多数为资源释放操作；</p><p>Spring 中，初始化和销毁方法扩展点有两种，一种是上面说的接口调用，另一种是在 BeanDefinition 中注册具体方法名称，然后在初始化过程中通过反射执行该方法；初始化方法的扩展点埋在 Bean 创建流程中；而销毁方法的扩展点则通过向虚拟机注册关闭勾子进行回调；</p><ol><li>定义初始化和销毁方法的接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.beans.factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/4/30</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Interface to be implemented by beans that need react once all properties has been set.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InitializingBean</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Invoked by bean factory after properties set.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.beans.factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/4/30</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Interface to be implemented by beans that need to release resources on destruction.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DisposableBean</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Invoked by bean factory on destruction of a bean.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当实现了这两个接口的类以 Bean 的形式注册到 BeanFactory 时，正如之前所说，分别会在 Bean 的属性注入完成后调用接口方法执行初始化操作，在 Bean 被虚拟机销毁时调用接口方法执行销毁操作；</p><ol start="2"><li>BeanDefinition 增加初始化方法和销毁方法属性</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.beans.factory.support;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/4/20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Xml bean definition reader.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XmlBeanDefinitionReader</span> <span class="keyword">extends</span> <span class="title class_">AbstractBeanDefinitionReader</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">XmlBeanDefinitionReader</span><span class="params">(BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(registry);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">XmlBeanDefinitionReader</span><span class="params">(BeanDefinitionRegistry registry, ResourceLoader resourceLoader)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(registry, resourceLoader);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loadBeanDefinitions</span><span class="params">(Resource resource)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            doLoadBeanDefinitions(resource.getInputStream(), resource);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Get input stream error&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   ...</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doLoadBeanDefinitions</span><span class="params">(InputStream inputStream, Resource resource)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// parse doc</span></span><br><span class="line">            <span class="type">Document</span> <span class="variable">doc</span> <span class="operator">=</span> XMLUtils.read(inputStream);</span><br><span class="line">            <span class="type">Element</span> <span class="variable">root</span> <span class="operator">=</span> doc.getDocumentElement();</span><br><span class="line">            <span class="type">NodeList</span> <span class="variable">childNodes</span> <span class="operator">=</span> root.getChildNodes();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; childNodes.getLength(); ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!(childNodes.item(i) <span class="keyword">instanceof</span> Element)) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="string">&quot;bean&quot;</span>.equals(childNodes.item(i).getNodeName())) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// parse element</span></span><br><span class="line">                <span class="type">Element</span> <span class="variable">bean</span> <span class="operator">=</span> (Element) childNodes.item(i);</span><br><span class="line">                <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> bean.getAttribute(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> bean.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> bean.getAttribute(<span class="string">&quot;class&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">initMethod</span> <span class="operator">=</span> bean.getAttribute(<span class="string">&quot;init-method&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">destroyMethod</span> <span class="operator">=</span> bean.getAttribute(<span class="string">&quot;destroy-method&quot;</span>);</span><br><span class="line">                <span class="comment">// get clazz</span></span><br><span class="line">                Class&lt;?&gt; clazz = Class.forName(className);</span><br><span class="line">                <span class="comment">// beanName</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> StringUtils.isNotBlank(id) ? id : name;</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isBlank(beanName)) &#123;</span><br><span class="line">                    beanName = clazz.getSimpleName();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// BeanDefinition</span></span><br><span class="line">                <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanDefinition</span>(clazz);</span><br><span class="line">                <span class="type">NodeList</span> <span class="variable">beanChildNodes</span> <span class="operator">=</span> bean.getChildNodes();</span><br><span class="line">                <span class="type">PropertyValues</span> <span class="variable">propertyValues</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PropertyValues</span>();</span><br><span class="line">                beanDefinition.setPropertyValues(propertyValues);</span><br><span class="line">                beanDefinition.setInitMethodName(initMethod);</span><br><span class="line">                beanDefinition.setDestroyMethodName(destroyMethod);</span><br><span class="line">                ...</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Load bean definition error&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XmlBeanDefinitionReader 将配置的初始化和销毁方法名称放到 BeanDefinition 中，后面通过反射调用执行；</p><ol start="3"><li>初始化方法的执行</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.beans.factory.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/3/26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Abstract autowire capable bean factory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractAutowireCapableBeanFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractBeanFactory</span> <span class="keyword">implements</span> <span class="title class_">AutowireCapableBeanFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">InstantiationStrategy</span> <span class="variable">instantiationStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CglibSubclassingInstantiationStrategy</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">creatBean</span><span class="params">(String beanName, BeanDefinition beanDefinition, Object... args)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建Bean实例</span></span><br><span class="line">            bean = createBeanInstance(beanName, beanDefinition, args);</span><br><span class="line">            <span class="comment">// 属性注入</span></span><br><span class="line">            applyPropertyValues(beanDefinition, beanName, bean);</span><br><span class="line">            <span class="comment">// 初始化Bean</span></span><br><span class="line">            initializeBean(beanName, bean, beanDefinition);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Instantiate bean failed.&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        addSingleton(beanName, bean);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">initializeBean</span><span class="params">(String beanName, Object bean, BeanDefinition beanDefinition)</span> &#123;</span><br><span class="line">        <span class="comment">// 执行初始化前的自定义方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">wrappedBean</span> <span class="operator">=</span> applyBeanPostProcessorsBeforeInitialization(bean, beanName);</span><br><span class="line">        <span class="comment">// 执行初始化方法</span></span><br><span class="line">        invokeInitMethods(beanName, bean, beanDefinition);</span><br><span class="line">        <span class="comment">// 执行初始化后的自定义方法</span></span><br><span class="line">        wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class="line">        <span class="keyword">return</span> wrappedBean;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">invokeInitMethods</span><span class="params">(String beanName, Object bean, BeanDefinition beanDefinition)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> InitializingBean) &#123;</span><br><span class="line">                ((InitializingBean) bean).afterPropertiesSet();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isBlank(beanDefinition.getInitMethodName())) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">initMethodName</span> <span class="operator">=</span> beanDefinition.getInitMethodName();</span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> beanDefinition.getBeanClass();</span><br><span class="line">            <span class="type">Method</span> <span class="variable">initMethod</span> <span class="operator">=</span> clazz.getDeclaredMethod(initMethodName);</span><br><span class="line">            <span class="keyword">if</span> (Objects.isNull(initMethod)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;Init method:&quot;</span> + initMethodName + <span class="string">&quot;can not find error.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            initMethod.invoke(bean);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Init methods invoke error.&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在属性注入之后，执行 invokeInitMethods 方法，执行接口调用或者反射调用；</p><ol start="4"><li>Bean 销毁适配器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ckage io.github.shengdoupi.springframework.beans.factory.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/4/30</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DisposableBeanAdapter</span> <span class="keyword">implements</span> <span class="title class_">DisposableBean</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object bean;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String beanName;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String destroyMethodName;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DisposableBeanAdapter</span><span class="params">(Object bean, String beanName, BeanDefinition beanDefinition)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bean = bean;</span><br><span class="line">        <span class="built_in">this</span>.beanName = beanName;</span><br><span class="line">        <span class="built_in">this</span>.destroyMethodName = beanDefinition.getDestroyMethodName();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> DisposableBean) &#123;</span><br><span class="line">                ((DisposableBean) bean).destroy();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(destroyMethodName)</span><br><span class="line">                    &amp;&amp; !(bean <span class="keyword">instanceof</span> DisposableBean &amp;&amp; <span class="string">&quot;destroy&quot;</span>.equals(destroyMethodName)) &#123;</span><br><span class="line">                <span class="type">Method</span> <span class="variable">destroyMethod</span> <span class="operator">=</span> <span class="built_in">this</span>.bean.getClass().getMethod(destroyMethodName);</span><br><span class="line">                <span class="keyword">if</span> (Objects.isNull(destroyMethod)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;Destroy method null error.&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                destroyMethod.invoke(bean);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Destroy bean error.&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用适配器进行包装的原因：一个 Bean 可以继承多个接口实现不同的方法来执行销毁逻辑，比如继承 DisposableBean 实现 destroy() 方法，继承 AutoCloseable 接口实现 close() 方法等；而对 Bean 工厂框架来说，在 Bean 的创建流程中，只想通过一个入口调用就去触发销毁逻辑，而不想感知具体的销毁方法是继承自DisposableBean 实现的 destroy() 方法，还是继承 AutoCloseable 接口实现 close() 方法等；因此，使用一个适配器将所有可能的销毁方法调用都用一个方法包装起来，供给 Spring 交互；通过适配器模式使得框架的分层更加合理，代码更加容易理解；</p><ol start="5"><li>创建 Bean 时注册销毁适配器对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.beans.factory.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/3/26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Abstract autowire capable bean factory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractAutowireCapableBeanFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractBeanFactory</span> <span class="keyword">implements</span> <span class="title class_">AutowireCapableBeanFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">InstantiationStrategy</span> <span class="variable">instantiationStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CglibSubclassingInstantiationStrategy</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">creatBean</span><span class="params">(String beanName, BeanDefinition beanDefinition, Object... args)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建Bean实例</span></span><br><span class="line">            bean = createBeanInstance(beanName, beanDefinition, args);</span><br><span class="line">            <span class="comment">// 属性注入</span></span><br><span class="line">            applyPropertyValues(beanDefinition, beanName, bean);</span><br><span class="line">            <span class="comment">// 初始化Bean</span></span><br><span class="line">            initializeBean(beanName, bean, beanDefinition);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Instantiate bean failed.&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        registerDisposableBeanIfNecessary(bean, beanDefinition, beanName);</span><br><span class="line">        addSingleton(beanName, bean);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">registerDisposableBeanIfNecessary</span><span class="params">(Object bean, BeanDefinition beanDefinition, String beanName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == bean) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> DisposableBean || StringUtils.isNotBlank(beanDefinition.getDestroyMethodName())) &#123;</span><br><span class="line">            registerDisposableBean(beanName, <span class="keyword">new</span> <span class="title class_">DisposableBeanAdapter</span>(bean, beanName, beanDefinition));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.beans.factory.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/3/26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Generic registry for shared bean instances.</span></span><br><span class="line"><span class="comment"> * Also supports registration for DisposableBean instances, dependencies of beans can be registered</span></span><br><span class="line"><span class="comment"> * to enforce an appropriate shutdown order.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultSingletonBeanRegistry</span> <span class="keyword">implements</span> <span class="title class_">SingletonBeanRegistry</span> &#123;</span><br><span class="line">    Map&lt;String, Object&gt; singletonObjects = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    Map&lt;String, DisposableBean&gt; disposableBeans = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">  </span><br><span class="line">    ...</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerDisposableBean</span><span class="params">(String beanName, DisposableBean bean)</span> &#123;</span><br><span class="line">        disposableBeans.put(beanName, bean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要执行销毁逻辑的 Bean 需要在创建时就注册到 disposableBeans 中，用于后面程序关闭时统一调用；</p><p>Bean 工厂的 DisposableBean 注册表是在 DefaultSingletonBeanRegistry 中，如果是单例非懒加载的 Bean，在初始化后注册 DisposableBeanAdapter 对象到注册表中。通过适配器包装后，无论销毁逻辑是怎么实现的，都可以交给适配器去调用执行；</p><p>可以关注到 DisposableBean 注册表是由 LinkedHashMap 实现，Spring 注释中提到这样是让注册顺序得到保留，在销毁时按照该顺序进行调用执行销毁方法，使得拥有相互依赖的 Bean 之间的销毁顺序可以得到保证；</p><ol start="6"><li>销毁方法的执行</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.beans.factory.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/4/26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Configurable bean factory, provides facilities to configure a bean factory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ConfigurableBeanFactory</span> <span class="keyword">extends</span> <span class="title class_">BeanFactory</span> &#123;</span><br><span class="line">    </span><br><span class="line">   ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Destroy all singleton beans in this bean factory, include inner beans that registered as disposable bean.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">destroySingletons</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.beans.factory.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/3/26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Default listable bean factory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultListableBeanFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractAutowireCapableBeanFactory</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">BeanDefinitionRegistry</span>, ConfigurableListableBeanFactory &#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroySingletons</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.destroySingletons();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.beans.factory.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/3/26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Generic registry for shared bean instances.</span></span><br><span class="line"><span class="comment"> * Also supports registration for DisposableBean instances, dependencies of beans can be registered</span></span><br><span class="line"><span class="comment"> * to enforce an appropriate shutdown order.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultSingletonBeanRegistry</span> <span class="keyword">implements</span> <span class="title class_">SingletonBeanRegistry</span> &#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroySingletons</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (String beanName : disposableBeans.keySet()) &#123;</span><br><span class="line">                <span class="type">DisposableBean</span> <span class="variable">bean</span> <span class="operator">=</span> disposableBeans.remove(beanName);</span><br><span class="line">                bean.destroy();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Destroy singletons error&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Bean 工厂需要提供一个统一的销毁入口，供虚拟机关闭钩子调用；该入口定义在 ConfigurableBeanFactory 中；</p><p>BeanFactory 的实现类自身不负责实现这个统一销毁逻辑，而是委托给其父类 DefaultSingletonBeanRegistry 执行；这里的设计模式：父类1的方法不由子类具体实现，而是子类委托给另一个和父类1同层的父类2去实现，主要体现了功能分层的思想。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.context.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/4/27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">DefaultResourceLoader</span> <span class="keyword">implements</span> <span class="title class_">ConfigurableApplicationContext</span> &#123;</span><br><span class="line">  </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerShutDownHook</span><span class="params">()</span> &#123;</span><br><span class="line">        Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        getBeanFactory().destroySingletons();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终，在应用上下文中向虚拟机关闭钩子注册该统一销毁入口；注册钩子时参数为 Thread 对象；</p><p>注意到这里 refresh 方法中并没有调用 registerShutDownHook 方法，因此在使用应用上下文时需要手动调用一次该方法；</p><h2 id="4-反向扩展-–-Bean-感知-Spring-的能力"><a href="#4-反向扩展-–-Bean-感知-Spring-的能力" class="headerlink" title="4 反向扩展 – Bean 感知 Spring 的能力"></a>4 反向扩展 – Bean 感知 Spring 的能力</h2><p>分支：<a href="https://github.com/shengdoupi/simple-spring/tree/aware_mechanism">https://github.com/shengdoupi/simple-spring/tree/aware_mechanism</a></p><p>Bean 是由 Spring 管理的，Bean 对象在整个生命周期中都被 Spring 的各个模块所使用。那么如果我们需要 Bean 在生命周期的特定时刻可以使用 Spring 自身的资源，即管理它的资源，比如 ResourceLoader、BeanFactory、ApplicationContext 等，该如何实现呢？</p><p>这种情况还是存在的，比如我们想要一个 Bean 在创建的时候进行资源的加载，这时候我们可以利用到 Spring 的 ResourceLoader；或者我们想要一个 Bean 在创建的过程中使用另一个 Bean 执行一些操作，这时候可以利用到 Spring 的 BeanFactory；</p><p>Spring 提供了 Aware（感知）机制。具体地，Aware 接口是一组标记接口，具体的子类定义和实现能够感知对应的框架组件对象，用于在 Bean 的生命周期中获取到 Spring 的组件资源，去处理复杂的业务逻辑；</p><ol><li>定义 Aware 接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.beans.factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/5/2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> A marker interface indicating that a bean is eligible to be notified</span></span><br><span class="line"><span class="comment"> * by Spring container of a specific framework object through a callback-style method.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Aware</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个标记接口表明一个 Bean 会通过容器回调的方式，感知到框架中的某个组件对象；</p><ol start="2"><li>具体组件感知类（接口）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.beans.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.github.shengdoupi.springframework.beans.BeansException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/5/2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Interface to be implemented by beans that wish to be aware of their owner -- BeanFactory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanFactoryAware</span> <span class="keyword">extends</span> <span class="title class_">Aware</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Callback that supplies the owning bean factory to a bean instance.</span></span><br><span class="line"><span class="comment">     * Invoked after properties population but before an init callback such as</span></span><br><span class="line"><span class="comment">     * afterPropertiesSet() or a custom init-method.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想要感知 BeanFactory 的 Bean 需要实现该接口；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.beans.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.github.shengdoupi.springframework.beans.BeansException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/5/2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Callback that allows a bean to be aware of the bean class loader</span></span><br><span class="line"><span class="comment"> * -- that the bean factory used to load bean classes.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanClassLoaderAware</span> <span class="keyword">extends</span> <span class="title class_">Aware</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Callback that supplies the bean class loader to a bean instance.</span></span><br><span class="line"><span class="comment">     * Invoked after properties population but before an init callback such as</span></span><br><span class="line"><span class="comment">     * afterPropertiesSet() or a custom init-method.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> classLoader</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setBeanClassLoader</span><span class="params">(ClassLoader classLoader)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 Bean 需要感知 BeanFactory 用于加载 Bean class 的 ClassLoader 对象，则实现该接口；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.beans.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.github.shengdoupi.springframework.beans.BeansException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/5/2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Interfaces to be implemented by beans that wish to be aware of their</span></span><br><span class="line"><span class="comment"> * bean name in this bean factory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanNameAware</span> <span class="keyword">extends</span> <span class="title class_">Aware</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Set the name of the bean in the bean factory that created this bean.</span></span><br><span class="line"><span class="comment">     * Invoked after properties population but before an init callback such as</span></span><br><span class="line"><span class="comment">     * afterPropertiesSet() or a custom init-method.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setBeanName</span><span class="params">(String beanName)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 Bean 需要感知自己在容器中的名称，则实现该接口；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/5/2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Interface to be implemented by a object that want to be notified of the application context it runs in.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ApplicationContextAware</span> <span class="keyword">extends</span> <span class="title class_">Aware</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Set the ApplicationContext that this object runs in.</span></span><br><span class="line"><span class="comment">     * Normally this call will be used to initialize the object.</span></span><br><span class="line"><span class="comment">     * Invoked after properties population but before an init callback such as</span></span><br><span class="line"><span class="comment">     * afterPropertiesSet() or a custom init-method. Invoked after ResourceLoadedAware.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> applicationContext</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 Bean 需要感知自己所在的应用上下文，则实现该接口；</p><ol start="3"><li>ApplicationContextAware 处理器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.context.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/5/2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> BeanPostProcessor implementation that supplies the ApplicationContext</span></span><br><span class="line"><span class="comment"> * to beans that implement the ApplicationContextAware interface.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationContextAwareProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ApplicationContext applicationContext;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a ApplicationContextAwareProcessor for a given context.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> applicationContext</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ApplicationContextAwareProcessor</span><span class="params">(ApplicationContext applicationContext)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeanBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ApplicationContextAware) &#123;</span><br><span class="line">            ((ApplicationContextAware) bean).setApplicationContext(applicationContext);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Modify a bean after its initialization.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The bean instance to use, if null, no subsequent BeanPostProcessors will be invoked.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeanAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于 ApplicationContext 无法从 BeanFactory 中直接拿到，因此需要想额外办法让 Bean 能感知到 ApplicationContext；</p><p>Spring 通过 BeanPostProcesoor 来让 Bean 在创建时拿到 ApplicationContext，具体地，框架内部定义一个类来实现 BeanPostProcesoor，该类在应用启动时（即 refresh() 时）初始化一个对象，并将此时的应用上下文对象赋予到该类的上下文属性；而该类的 postProcessBeanBeforeInitialization 方法就是把其上下文属性对象赋予实现了 ApplicationContextAware 接口的 Bean；</p><p>显然，作为一个 BeanPostProcessor 实现类，ApplicationContextAwareProcessor 需要在合适的时机注册到 BeanFactory 的 beanPostProcessors 注册表中；</p><ol start="4"><li>ApplicationContextAwareProcessor 注册</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.context.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/4/27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">DefaultResourceLoader</span> <span class="keyword">implements</span> <span class="title class_">ConfigurableApplicationContext</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 创建 BeanFactory 并加载BeanDefinition</span></span><br><span class="line">            refreshBeanFactory();</span><br><span class="line">            <span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> getBeanFactory();</span><br><span class="line">            <span class="comment">// 添加 ApplicationContextAwareProcessor 到 BeanFactory 注册表中</span></span><br><span class="line">            beanFactory.addBeanPostProcessor(<span class="keyword">new</span> <span class="title class_">ApplicationContextAwareProcessor</span>(<span class="built_in">this</span>));</span><br><span class="line">            <span class="comment">// 2. Bean 实例化之前, 调用BeanFactoryPostProcessors</span></span><br><span class="line">            invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line">            <span class="comment">// 3. 注册 BeanPostProcessor</span></span><br><span class="line">            registerBeanPostProcessors(beanFactory);</span><br><span class="line">            <span class="comment">// 4. 完成实例化单例Bean</span></span><br><span class="line">            finishBeanFactoryInitialization(beanFactory);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Application context refresh error&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如前所说，ApplicationContextAwareProcessor 需要在合适的时机注册到 BeanFactory 的 beanPostProcessors 注册表中，这个时机就是在应用上下文启动时，BeanFactory 实例化之后；</p><ol start="5"><li>Bean 创建过程中感知回调</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.beans.factory.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/3/26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Abstract autowire capable bean factory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractAutowireCapableBeanFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractBeanFactory</span> <span class="keyword">implements</span> <span class="title class_">AutowireCapableBeanFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">InstantiationStrategy</span> <span class="variable">instantiationStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CglibSubclassingInstantiationStrategy</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">creatBean</span><span class="params">(String beanName, BeanDefinition beanDefinition, Object... args)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建Bean实例</span></span><br><span class="line">            bean = createBeanInstance(beanName, beanDefinition, args);</span><br><span class="line">            <span class="comment">// 属性注入</span></span><br><span class="line">            applyPropertyValues(beanDefinition, beanName, bean);</span><br><span class="line">            <span class="comment">// 初始化Bean</span></span><br><span class="line">            initializeBean(beanName, bean, beanDefinition);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Instantiate bean failed.&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        registerDisposableBeanIfNecessary(bean, beanDefinition, beanName);</span><br><span class="line">        addSingleton(beanName, bean);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    ...</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">initializeBean</span><span class="params">(String beanName, Object bean, BeanDefinition beanDefinition)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> Aware) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> BeanNameAware) &#123;</span><br><span class="line">                ((BeanNameAware) bean).setBeanName(beanName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> BeanFactoryAware) &#123;</span><br><span class="line">                ((BeanFactoryAware) bean).setBeanFactory(<span class="built_in">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> BeanClassLoaderAware) &#123;</span><br><span class="line">                ((BeanClassLoaderAware) bean).setBeanClassLoader(<span class="built_in">super</span>.getClassLoader());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 执行初始化前的自定义方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">wrappedBean</span> <span class="operator">=</span> applyBeanPostProcessorsBeforeInitialization(bean, beanName);</span><br><span class="line">        <span class="comment">// 执行初始化方法</span></span><br><span class="line">        invokeInitMethods(beanName, bean, beanDefinition);</span><br><span class="line">        <span class="comment">// 执行初始化后的自定义方法</span></span><br><span class="line">        wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class="line">        <span class="keyword">return</span> wrappedBean;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   ...</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">applyBeanPostProcessorsBeforeInitialization</span><span class="params">(Object existingBean, String beanName)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> existingBean;</span><br><span class="line">        <span class="keyword">for</span> (BeanPostProcessor postProcessor : getBeanPostProcessors()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">current</span> <span class="operator">=</span> postProcessor.postProcessBeanBeforeInitialization(result, beanName);</span><br><span class="line">            <span class="keyword">if</span> (current == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">            result = current;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在合适的时机（Bean 属性注入之后，初始化之前）执行感知回调；其中，ApplicationContextAware 会在 BeanPostProcessor 执行时进行回调。</p><p><img src="/%E8%BD%AC%E5%AD%98%E5%A4%B1%E8%B4%A5%EF%BC%8C%E5%BB%BA%E8%AE%AE%E7%9B%B4%E6%8E%A5%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E6%96%87%E4%BB%B6%20" alt="转存失败，建议直接上传图片文件"></p><h2 id="5-Bean-对象作用域"><a href="#5-Bean-对象作用域" class="headerlink" title="5 Bean 对象作用域"></a>5 Bean 对象作用域</h2><p>分支：<a href="https://github.com/shengdoupi/simple-spring/tree/scope">https://github.com/shengdoupi/simple-spring/tree/scope</a></p><p>前面 Bean 的创建和获取的逻辑都只处理了单例 Bean ：创建时放入单例 Bean 注册表中，获取时从内存中获取；</p><p>有时我们需要 Bean 工厂提供原型 Bean 的获取能力，即每次获取到的都是新创建的一个对象，而不是共享对象；这种场景很常见，比如 Bean 包含某个有状态属性，每次执行逻辑都需要重置状态，那么自然也就需要重新创建一个对象；</p><p>单例 (Singleton) 和原型 (Prototype) 即是 Bean 的两种作用域，这一部分我们会在 Bean 的创建和获取过程增加对原型作用域的处理逻辑，具体地：</p><ul><li>Bean 作用域需要在 BeanDefinition 中就指定好，即需要在 BeanDefinition 中新增作用域相关属性；</li><li>XML 配置新增 scope 字段，配置读取时将 scope 加载到 BeanDefinition ；</li><li>创建 Bean 时根据  BeanDefinition 中的作用域来决定是否放入单例 Bean 注册表；</li></ul><ol><li>BeanDefinition 新增作用域属性</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.beans.factory.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.github.shengdoupi.springframework.beans.PropertyValues;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/3/21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Bean definition.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanDefinition</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Scope identifier for the standard singleton scope</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">SCOPE_SINGLETON</span> <span class="operator">=</span> <span class="string">&quot;singleton&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Scope identifier for the standard prototype scope</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">SCOPE_PROTOTYPE</span> <span class="operator">=</span> <span class="string">&quot;prototype&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Class beanClass;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String initMethodName;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String destroyMethodName;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> PropertyValues propertyValues;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">scope</span> <span class="operator">=</span> SCOPE_SINGLETON;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">singleton</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">prototype</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BeanDefinition</span><span class="params">(Class beanClass)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.beanClass = beanClass;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BeanDefinition</span><span class="params">(Class beanClass, PropertyValues propertyValues)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.beanClass = beanClass;</span><br><span class="line">        <span class="built_in">this</span>.propertyValues = propertyValues;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setScope</span><span class="params">(String scope)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.scope = scope;</span><br><span class="line">        <span class="built_in">this</span>.singleton = SCOPE_SINGLETON.equals(scope);</span><br><span class="line">        <span class="built_in">this</span>.prototype = SCOPE_PROTOTYPE.equals(scope);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>XML 配置新增 scope 字段，并读入 BeanDefinition</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.beans.factory.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/4/20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Xml bean definition reader.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XmlBeanDefinitionReader</span> <span class="keyword">extends</span> <span class="title class_">AbstractBeanDefinitionReader</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doLoadBeanDefinitions</span><span class="params">(InputStream inputStream, Resource resource)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// parse doc</span></span><br><span class="line">            <span class="type">Document</span> <span class="variable">doc</span> <span class="operator">=</span> XMLUtils.read(inputStream);</span><br><span class="line">            <span class="type">Element</span> <span class="variable">root</span> <span class="operator">=</span> doc.getDocumentElement();</span><br><span class="line">            <span class="type">NodeList</span> <span class="variable">childNodes</span> <span class="operator">=</span> root.getChildNodes();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; childNodes.getLength(); ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!(childNodes.item(i) <span class="keyword">instanceof</span> Element)) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="string">&quot;bean&quot;</span>.equals(childNodes.item(i).getNodeName())) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// parse element</span></span><br><span class="line">                <span class="type">Element</span> <span class="variable">bean</span> <span class="operator">=</span> (Element) childNodes.item(i);</span><br><span class="line">                <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> bean.getAttribute(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> bean.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> bean.getAttribute(<span class="string">&quot;class&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">initMethod</span> <span class="operator">=</span> bean.getAttribute(<span class="string">&quot;init-method&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">destroyMethod</span> <span class="operator">=</span> bean.getAttribute(<span class="string">&quot;destroy-method&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">scope</span> <span class="operator">=</span> bean.getAttribute(<span class="string">&quot;scope&quot;</span>);</span><br><span class="line">                <span class="comment">// get clazz</span></span><br><span class="line">                Class&lt;?&gt; clazz = Class.forName(className);</span><br><span class="line">                <span class="comment">// beanName</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> StringUtils.isNotBlank(id) ? id : name;</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isBlank(beanName)) &#123;</span><br><span class="line">                    beanName = clazz.getSimpleName();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// BeanDefinition</span></span><br><span class="line">                <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanDefinition</span>(clazz);</span><br><span class="line">                <span class="type">NodeList</span> <span class="variable">beanChildNodes</span> <span class="operator">=</span> bean.getChildNodes();</span><br><span class="line">                <span class="type">PropertyValues</span> <span class="variable">propertyValues</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PropertyValues</span>();</span><br><span class="line">                beanDefinition.setPropertyValues(propertyValues);</span><br><span class="line">                beanDefinition.setInitMethodName(initMethod);</span><br><span class="line">                beanDefinition.setDestroyMethodName(destroyMethod);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; beanChildNodes.getLength(); ++j) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!(beanChildNodes.item(j) <span class="keyword">instanceof</span> Element)) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!<span class="string">&quot;property&quot;</span>.equals(beanChildNodes.item(j).getNodeName())) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// parse property</span></span><br><span class="line">                    <span class="type">Element</span> <span class="variable">property</span> <span class="operator">=</span> (Element) beanChildNodes.item(j);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">attrName</span> <span class="operator">=</span> property.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">attrValue</span> <span class="operator">=</span> property.getAttribute(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">attrRef</span> <span class="operator">=</span> property.getAttribute(<span class="string">&quot;ref&quot;</span>);</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> StringUtils.isNotBlank(attrRef) ? (BeanReference) () -&gt; attrRef : attrValue;</span><br><span class="line">                    propertyValues.addPropertyValue(<span class="keyword">new</span> <span class="title class_">PropertyValue</span>(attrName, value));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isNotBlank(scope)) &#123;</span><br><span class="line">                    beanDefinition.setScope(scope);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (getRegistry().containsBeanDefinition(beanName)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Duplicate bean name: &quot;</span> + beanName);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Register bean definition.</span></span><br><span class="line">                getRegistry().registerBeanDefinition(beanName, beanDefinition);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Load bean definition error&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>创建 Bean 时依据作用域决定是否放入单例 Bean 注册表</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.beans.factory.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/3/26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Abstract autowire capable bean factory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractAutowireCapableBeanFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractBeanFactory</span> <span class="keyword">implements</span> <span class="title class_">AutowireCapableBeanFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">InstantiationStrategy</span> <span class="variable">instantiationStrategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CglibSubclassingInstantiationStrategy</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">creatBean</span><span class="params">(String beanName, BeanDefinition beanDefinition, Object... args)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建Bean实例</span></span><br><span class="line">            bean = createBeanInstance(beanName, beanDefinition, args);</span><br><span class="line">            <span class="comment">// 属性注入</span></span><br><span class="line">            applyPropertyValues(beanDefinition, beanName, bean);</span><br><span class="line">            <span class="comment">// 初始化Bean</span></span><br><span class="line">            initializeBean(beanName, bean, beanDefinition);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Instantiate bean failed.&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        registerDisposableBeanIfNecessary(bean, beanDefinition, beanName);</span><br><span class="line">        <span class="keyword">if</span> (beanDefinition.isSingleton()) &#123;</span><br><span class="line">            addSingleton(beanName, bean);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">registerDisposableBeanIfNecessary</span><span class="params">(Object bean, BeanDefinition beanDefinition, String beanName)</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="literal">null</span> == bean) &#123;</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (!beanDefinition.isSingleton()) &#123;</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> DisposableBean || StringUtils.isNotBlank(beanDefinition.getDestroyMethodName())) &#123;</span><br><span class="line">              registerDisposableBean(beanName, <span class="keyword">new</span> <span class="title class_">DisposableBeanAdapter</span>(bean, beanName, beanDefinition));</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非单例 Bean 不需要执行销毁方法；</p><h2 id="6-创建复杂-Bean-–-FactoryBean-扩展"><a href="#6-创建复杂-Bean-–-FactoryBean-扩展" class="headerlink" title="6 创建复杂 Bean – FactoryBean 扩展"></a>6 创建复杂 Bean – FactoryBean 扩展</h2><p>分支：<a href="https://github.com/shengdoupi/simple-spring/tree/factory_bean">https://github.com/shengdoupi/simple-spring/tree/factory_bean</a></p><p>一个 Bean 所包含的信息都被注册在 BeanDefinition 中，而 BeanDefinition 由使用者配置后被框架读取加载得到；目前 simple-spring 中一个 BeanDefinition 可以配置的信息包括：</p><ul><li>Bean 对象所属的 Class 类；</li><li>Bean 对象的属性名称和属性值，包括是 Bean 对象的属性；</li><li>初始化和销毁方法；</li><li>对象作用域，单例还是原型等；</li></ul><p>在某些情况下，创建 Bean 的过程相当复杂，这时需要在 BeanDefinition 配置中提供大量的配置信息，这时配置的方法对上层（使用者）来说显得不够友好，如果能采用编码的方法效果会更好；</p><p>Spring 中提供了一个 FactoryBean 接口，使用者通过实现该接口定制化创建 Bean 的逻辑；</p><p>FactoryBean 一般用来创建复杂的 Bean，如果一个 Bean 在创建的过程中涉及到很多其他的 Bean 或者复杂逻辑，用 XML 配置会比较困难，这时可以考虑用 FactoryBean;</p><ol><li>定义 FactoryBean 接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.beans.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.github.shengdoupi.springframework.beans.BeansException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/5/5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Interface to be implemented by objects used within a BeanFactory which</span></span><br><span class="line"><span class="comment"> * are themselves factories for individual objects.</span></span><br><span class="line"><span class="comment"> * If a bean implements this interface, it is used as a factory for an object to expose,</span></span><br><span class="line"><span class="comment"> * not directly as an instance that will be exposed itself;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FactoryBean</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Return an instance of the object managed by this factory;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Return the type of object that this FactoryBean creates;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class <span class="title function_">getObjectType</span><span class="params">()</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Return if the object managed by this FactoryBean is singleton.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口提供三个方法，获取该 factory 管理的 bean 对象、其类型以及是否单例；</p><ol start="2"><li>FactoryBean 注册服务</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.beans.factory.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.github.shengdoupi.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> io.github.shengdoupi.springframework.beans.factory.FactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/5/5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Support base class for singleton registries which need to handle FactoryBean instances.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FactoryBeanRegistrySupport</span> <span class="keyword">extends</span> <span class="title class_">DefaultSingletonBeanRegistry</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Cache of singleton object created by factory beans: FactoryBean name to object.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; factoryBeanObjectCache = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Determine the type for the given FactoryBean.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> factoryBean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; getClassForFactoryBean(FactoryBean factoryBean) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> factoryBean.getObjectType();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Get clas for factory bean error&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Obtain an object to expose from the given FactoryBean, if cached in factoryBeanObjectCache.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> factoryBeanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">getCachedObjectForFactoryBean</span><span class="params">(String factoryBeanName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.factoryBeanObjectCache.get(factoryBeanName);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Obtain an object to expose from the given FactoryBean.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> factory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">getObjectFromFactoryBean</span><span class="params">(String beanName, FactoryBean factory)</span> &#123;</span><br><span class="line">        Object object;</span><br><span class="line">        <span class="keyword">if</span> (factory.isSingleton()) &#123;</span><br><span class="line">            object = <span class="built_in">this</span>.factoryBeanObjectCache.get(beanName);</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == object) &#123;</span><br><span class="line">                object = doGetObjectFromFactoryBean(factory, beanName);</span><br><span class="line">                <span class="built_in">this</span>.factoryBeanObjectCache.put(beanName, object);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            object = doGetObjectFromFactoryBean(factory, beanName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Obtain an object to expose from the given FactoryBean.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> factory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">doGetObjectFromFactoryBean</span><span class="params">(FactoryBean factory, String beanName)</span> &#123;</span><br><span class="line">        Object object;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            object = factory.getObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Get object from factory bean error, beanName: &quot;</span> + beanName, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们知道 FactoryBean 类的工厂对象getObject获取的是 FactoryBean 工厂管理的对象，Spring 也支持这类对象的作用域管理，如果是单例还需要有单例对象注册表缓存；</p><p>FactoryBeanRegistrySupport 用来获取 FactoryBean 类的工厂对象所管理的对象的获取，同时继承了 DefaultSingletonBeanRegistry ，方便 Bean 工厂只需要继承 FactoryBeanRegistrySupport 类，即可具备对普通 Bean 对象、 FactoryBean 工厂对象以及该工厂对象所管理的具体对象，三种 Bean 的注册能力；</p><ol start="3"><li>扩展 BeanFactory 获取 FactoryBean 逻辑</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.beans.factory.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/3/26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractBeanFactory</span> <span class="keyword">extends</span> <span class="title class_">FactoryBeanRegistrySupport</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">BeanFactory</span>, ConfigurableBeanFactory &#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">return</span> doGetBean(beanName, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> &lt;T&gt; T <span class="title function_">doGetBean</span><span class="params">(String beanName, Class&lt;T&gt; requiredType, Object... args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        bean = getSingleton(beanName);</span><br><span class="line">        <span class="keyword">if</span> (bean == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> getBeanDefinition(beanName);</span><br><span class="line">            bean = creatBean(beanName, beanDefinition, args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> getObjectForBeanInstance(beanName, bean, requiredType);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> &lt;T&gt; T <span class="title function_">getObjectForBeanInstance</span><span class="params">(String beanName, Object bean, Class&lt;T&gt; requiredType)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(bean <span class="keyword">instanceof</span> FactoryBean)) &#123;</span><br><span class="line">            <span class="keyword">return</span> adaptBeanInstance(beanName, bean, requiredType);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> getCachedObjectForFactoryBean(beanName);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == object) &#123;</span><br><span class="line">            FactoryBean&lt;?&gt; factoryBean = (FactoryBean&lt;?&gt;) bean;</span><br><span class="line">            object = getObjectFromFactoryBean(beanName, factoryBean);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (T) object;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于 getBean() 方法做针对 FactoryBean 的扩展逻辑：首先和普通 Bean 对象一样，获取到 FactoryBean 工厂对象；然后判断创建出来的对象若是 FactoryBean 工厂对象，将该对象替换为  FactoryBean 工厂对象所管理的对象；</p><h2 id="7-容器事件机制"><a href="#7-容器事件机制" class="headerlink" title="7 容器事件机制"></a>7 容器事件机制</h2><p>分支：<a href="https://github.com/shengdoupi/simple-spring/tree/application_event">https://github.com/shengdoupi/simple-spring/tree/application_event</a></p><p>Spring 提供了容器事件机制，具体的，通过实现容器事件接口定义事件类型，向容器中注册事件的监听者，最后通过容器（应用上下文）发布事件，容器将回调注册了的该事件监听者们，执行具体逻辑；</p><p>事件机制的角色：</p><ul><li>事件源</li><li>事件监听者注册表</li><li>事件广播器</li></ul><p>Spring 基于观察者模式，分别就这三个身份对事件机制做了设计和实现。观察者模式的核心在于抽象依赖抽象，事件机制中的事件源和事件监听者均被做了抽象而相互依赖，事件广播器则是依赖于抽象的事件源、抽象的事件监听者，是一种控制反转思想；</p><ol><li>定义事件抽象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.EventObject;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/5/7</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Class to be extended by all application events.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ApplicationEvent</span> <span class="keyword">extends</span> <span class="title class_">EventObject</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a prototypical Event.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source The object on which the Event initially occurred.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if source is null.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ApplicationEvent</span><span class="params">(Object source)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有容器事件的抽象类，包括用户自定义的事件都是该类的具体实现。</p><p>包含一个 source 属性，代表发生事件的对象（事件发生地）；</p><ol start="2"><li>定义抽象监听者</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.EventListener;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/5/7</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Interface to be implemented by all application listeners.</span></span><br><span class="line"><span class="comment"> * Based on the standard interface <span class="doctag">@EventListener</span> for the Observer design pattern.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ApplicationListener</span> &lt;E <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span>&gt; <span class="keyword">extends</span> <span class="title class_">EventListener</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Handle an application event.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(E event)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事件监听者只需监听自己关心的事件源；</p><ol start="3"><li>定义广播器接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.context.event;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/5/8</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Interface to be implemented by objects that can register and manage ApplicationListener objects</span></span><br><span class="line"><span class="comment"> * and publish events to them.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ApplicationEventMulticaster</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Add a listener to be notified of all events.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> applicationListener</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addApplicationListener</span><span class="params">(ApplicationListener&lt;?&gt; applicationListener)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Remove a listener from the notification list.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> applicationListener</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">removeApplicationListener</span><span class="params">(ApplicationListener&lt;?&gt; applicationListener)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Multicast the given application event to appropriate listeners.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> applicationEvent</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">multicastEvent</span><span class="params">(ApplicationEvent applicationEvent)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>广播器的作用主要是注册、管理和通知监听者，当事件发生时，需要调用一次广播器；</p><ol start="4"><li>实现广播器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.context.event;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/5/8</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractApplicationEventMulticaster</span> <span class="keyword">implements</span> <span class="title class_">ApplicationEventMulticaster</span>, BeanFactoryAware &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Set&lt;ApplicationListener&lt;ApplicationEvent&gt;&gt; applicationListeners = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> BeanFactory beanFactory;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="built_in">this</span>.beanFactory = beanFactory;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addApplicationListener</span><span class="params">(ApplicationListener&lt;?&gt; applicationListener)</span> &#123;</span><br><span class="line">        applicationListeners.add((ApplicationListener&lt;ApplicationEvent&gt;) applicationListener);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeApplicationListener</span><span class="params">(ApplicationListener&lt;?&gt; applicationListener)</span> &#123;</span><br><span class="line">        applicationListeners.remove(applicationListener);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> Collection&lt;ApplicationListener&gt; <span class="title function_">getApplicationListeners</span><span class="params">(ApplicationEvent event)</span> &#123;</span><br><span class="line">        List&lt;ApplicationListener&gt; allListeners = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (ApplicationListener applicationListener : applicationListeners) &#123;</span><br><span class="line">            <span class="keyword">if</span> (supportEvent(applicationListener, event)) &#123;</span><br><span class="line">                allListeners.add(applicationListener);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> allListeners;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">supportEvent</span><span class="params">(ApplicationListener listener, ApplicationEvent event)</span> &#123;</span><br><span class="line">        <span class="type">Type</span> <span class="variable">type</span> <span class="operator">=</span> listener.getClass().getGenericInterfaces()[<span class="number">0</span>];</span><br><span class="line">        <span class="type">Type</span> <span class="variable">actualTypeAugment</span> <span class="operator">=</span> ((ParameterizedType) type).getActualTypeArguments()[<span class="number">0</span>];</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> actualTypeAugment.getTypeName();</span><br><span class="line">        Class&lt;?&gt; eventClassname;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            eventClassname = Class.forName(className);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Wrong event class name: &quot;</span> + className);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// A.isAssignableFrom(B) -&gt; A 是 B 的父类</span></span><br><span class="line">        <span class="keyword">return</span> eventClassname.isAssignableFrom(event.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AbstractApplicationEventMulticaster 主要是实现广播器的基本功能: 监听器的注册和移除，以及获取对某个事件感兴趣的监听器集合；</p><p>主要是通过获取监听者父类 ApplicationListener 这个泛型类的参数类型（事件类），注意这里的实现方法只能对通过 JDK 实例化策略生成的监听者对象，而对 CGLIB 代理产生的代理对象则无效。因此，这里需要将 BeanFactory 的实例化策略修改为 SimpleInstantiationStrategy. 判断监听者感兴趣的事件类是否是目标事件类或者其父类时，主要用到了 isAssignableFrom 方法, A.isAssignableFrom(B) 表示 A 是 B 的父类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.context.event;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/5/8</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleApplicationEventMulticaster</span> <span class="keyword">extends</span> <span class="title class_">AbstractApplicationEventMulticaster</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">multicastEvent</span><span class="params">(ApplicationEvent applicationEvent)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (ApplicationListener applicationListener : getApplicationListeners(applicationEvent)) &#123;</span><br><span class="line">            applicationListener.onApplicationEvent(applicationEvent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取感兴趣的监听器集合，执行回调；</p><ol start="5"><li>定义抽象事件发布者</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.context;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/5/8</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Interface that encapsulates event publish functionality.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ApplicationEventPublisher</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Notify all matching listeners registered with this application of an event.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">publishEvent</span><span class="params">(ApplicationEvent event)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>万物皆抽象，事件发布者和事件广播器做一个解耦，方便扩展；</p><ol start="6"><li>容器初始化刷新事件框架</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.context.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/4/27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">DefaultResourceLoader</span> <span class="keyword">implements</span> <span class="title class_">ConfigurableApplicationContext</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">APPLICATION_EVENT_MULTICASTER_BEAN_NAME</span> <span class="operator">=</span> <span class="string">&quot;applicationEventMulticaster&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> ApplicationEventMulticaster applicationEventMulticaster;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="comment">// 4. 初始化事件广播器</span></span><br><span class="line">            initApplicationEventMulticaster();</span><br><span class="line">            <span class="comment">// 5. 注册事件监听器</span></span><br><span class="line">            registerListeners();</span><br><span class="line">            <span class="comment">// 4. 完成实例化单例Bean</span></span><br><span class="line">            finishBeanFactoryInitialization(beanFactory);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Application context refresh error&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initApplicationEventMulticaster</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> getBeanFactory();</span><br><span class="line">        <span class="built_in">this</span>.applicationEventMulticaster = <span class="keyword">new</span> <span class="title class_">SimpleApplicationEventMulticaster</span>();</span><br><span class="line">        beanFactory.registerSingleton(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, applicationEventMulticaster);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerListeners</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> getBeanFactory();</span><br><span class="line">        Map&lt;String, ApplicationListener&gt; applicationListeners = beanFactory.getBeansOfType(ApplicationListener.class);</span><br><span class="line">        <span class="keyword">for</span> (ApplicationListener applicationListener : applicationListeners.values()) &#123;</span><br><span class="line">            applicationEventMulticaster.addApplicationListener(applicationListener);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">publishEvent</span><span class="params">(ApplicationEvent event)</span> &#123;</span><br><span class="line">        applicationEventMulticaster.multicastEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>容器刷新过程中，初始化事件广播器，同时注册所有的事件监听器 Bean 到注册表中；</p><p>此外，容器对外暴露事件发布接口，对使用者来说容器作为事件发布者执行事件发布；</p><ol start="7"><li>容器生命周期事件</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.context.event;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.github.shengdoupi.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> io.github.shengdoupi.springframework.context.ApplicationEvent;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/5/8</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Base class for events raised for an ApplicationContext.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ApplicationContextEvent</span> <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ApplicationContextEvent</span><span class="params">(ApplicationContext source)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get ApplicationContext that the event was raised for.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ApplicationContext <span class="title function_">getApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (ApplicationContext) getSource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.context.event;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.github.shengdoupi.springframework.context.ApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/5/8</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Event raised when an ApplicationEvent get initialized or refreshed.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContextRefreshedEvent</span> <span class="keyword">extends</span> <span class="title class_">ApplicationContextEvent</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a new ContextRefreshedEvent.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ContextRefreshedEvent</span><span class="params">(ApplicationContext source)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.context.event;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.github.shengdoupi.springframework.context.ApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/5/8</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Event raised when an ApplicationContext is closed.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContextClosedEvent</span> <span class="keyword">extends</span> <span class="title class_">ApplicationContextEvent</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a ContextClosedEvent.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ContextClosedEvent</span><span class="params">(ApplicationContext source)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring 提供了与容器生命周期相关的事件，包括容器刷新、关闭等，在容器到达特定生命周期时触发；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.shengdoupi.springframework.context.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhoukehh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/4/27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">DefaultResourceLoader</span> <span class="keyword">implements</span> <span class="title class_">ConfigurableApplicationContext</span> &#123;</span><br><span class="line">   </span><br><span class="line">    ... </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ...</span><br><span class="line">          </span><br><span class="line">            <span class="comment">// 7. 完成容器刷新</span></span><br><span class="line">            finishRefresh();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeansException</span>(<span class="string">&quot;Application context refresh error&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 发布容器关闭事件</span></span><br><span class="line">        publishEvent(<span class="keyword">new</span> <span class="title class_">ContextClosedEvent</span>(<span class="built_in">this</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 执行单例 Bean 的销毁方法</span></span><br><span class="line">        getBeanFactory().destroySingletons();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">finishRefresh</span><span class="params">()</span> &#123;</span><br><span class="line">        publishEvent(<span class="keyword">new</span> <span class="title class_">ContextRefreshedEvent</span>(<span class="built_in">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应用上下文在特定生命周期发布相关事件；</p><p>Spring 通过观察者模式实现了事件机制，主要包括事件源定义、事件监听机制和事件发布；</p><ul><li>事件源：事件的主体，同时包含”事件发生地”这个属性；</li><li>事件监听：监听者的抽象定义、注册，核心逻辑是在容器的刷新过程中将监听者注册到注册表中；</li><li>事件发布：事件发布者的抽象定义、事件广播器的具体实现，核心逻辑是事件发生时进行广播，判断对该事件感兴趣的监听者集合，进行回调；</li></ul><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>本节我们才算真正的完成了创建对象的 IoC（控制反转）框架。具体体现在我们可以通过简单配置的方式就能获取一个 Bean ，和手写代码完成了解耦，将创建对象的能力给了框架。此外，框架通过在自动化创建 Bean 的过程中埋下扩展点，以及  Aware 机制和 FactoryBean 的设计，让我们可以对 Bean 在配置的基础上做一些额外的扩展。最后，还通过事件机制让我们 Bean 工厂的生命周期对业务可见。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4fbd80ee30a148c9ad880c0aa9ae027f~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1743&h=1160&s=167931&e=png&a=1&b=ffffff" alt="spring-02 (1).png"></p><h1 id="03-总结一下"><a href="#03-总结一下" class="headerlink" title="03 总结一下"></a>03 总结一下</h1><p>这篇文章我们实现了一个较为完整的 Spring Bean 工厂模块，从最简单的对象缓存（01.1），到支持含参构造函数、属性注入，我们可以缓存的对象逐渐更接近我们平时使用的对象。</p><p>再后来，我们发现这个 Bean 工厂使用起来还是比较麻烦，好像只有一个缓存的作用，获取一个对象还是要写很多代码。为此，我们引入了配置化模块：Bean 定义文件自动加载，引入了自动化模块：应用上下文自动创建 BeanFactory，给工厂和 Bean 创建提供一个完全 IoC 的生命周期（不需要业务人员干预）。</p><p>最后，我们不想让一个 Bean 对象的创建那么拘泥于我们的初始配置，因为有些逻辑不是可以通过配置解决的，比如创建时进行资源加载等。为此，我们又在容器和 Bean 的生命周期中埋下了各种扩展点，包括 BeanFactoryPostProcessor、BeanPostProcessor 以及初始化和销毁方法等。</p><p>可见这个 Bean 工厂在我们手下一步步变得完整起来，下一节我们将对 Spring 的另一个核心基础功能 AOP 做学习实现。</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ol><li><a href="https://bugstack.cn/md/spring/develop-spring/">https://bugstack.cn/md/spring/develop-spring/</a></li><li><a href="https://github.com/spring-projects/spring-framework">spring-framework</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;实践出真知&lt;/strong&gt; – 如果真想从 spring 中学到东西，你一定要动手写一个自己的 spring。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Docker-镜像构建</title>
    <link href="http://shengdoupi.github.io/2024/01/04/docker-build/"/>
    <id>http://shengdoupi.github.io/2024/01/04/docker-build/</id>
    <published>2024-01-04T04:55:56.381Z</published>
    <updated>2024-01-04T04:59:27.637Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://shengdoupi.github.io/2024/01/04/mysql-uniquekey/"/>
    <id>http://shengdoupi.github.io/2024/01/04/mysql-uniquekey/</id>
    <published>2024-01-04T04:55:25.325Z</published>
    <updated>2024-01-04T04:55:25.325Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Spring-AOP原理</title>
    <link href="http://shengdoupi.github.io/2024/01/04/spring-aop/"/>
    <id>http://shengdoupi.github.io/2024/01/04/spring-aop/</id>
    <published>2024-01-04T04:55:13.334Z</published>
    <updated>2024-01-04T04:58:37.968Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>SQL优化-orderBy</title>
    <link href="http://shengdoupi.github.io/2024/01/04/mysql-order-by/"/>
    <id>http://shengdoupi.github.io/2024/01/04/mysql-order-by/</id>
    <published>2024-01-04T04:54:27.323Z</published>
    <updated>2024-01-04T04:58:22.731Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://shengdoupi.github.io/2023/12/10/1/"/>
    <id>http://shengdoupi.github.io/2023/12/10/1/</id>
    <published>2023-12-10T13:32:59.657Z</published>
    <updated>2023-12-10T13:32:59.657Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Java有序集合</title>
    <link href="http://shengdoupi.github.io/2023/11/25/java_ordered_collection/"/>
    <id>http://shengdoupi.github.io/2023/11/25/java_ordered_collection/</id>
    <published>2023-11-25T11:04:11.946Z</published>
    <updated>2024-01-08T16:23:17.249Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a><strong>概览</strong></h1><p>最近优化业务日志规范，我们定义了日志打点的数据结构是形如key-value结构，其中key是日志的业务语意，value为对应的业务值，每处打点我们希望可以实现多个业务语意-值的映射对，并在日志中按照我们在代码中的顺序输出出来。即我们需要一个有序映射的数据结构来做存储，选择使用LinkedHashMap。</p><p>Java集合中有些接口或实现类是约束、实现了元素有序能力的，这里分两类：</p><ol><li>键自然序或者指定比较顺序进行键值排序的能力，比如SortedMap（对应的SortedSet），其实现类TreeMap；</li><li>按元素的插入先后顺序进行排序，比如接口List、Queue，以及Map的实现类LinkedHashMap这些；</li></ol><p>这篇文章专门介绍Java中有序集合的实现，特别地从源码介绍TreeMap和LinkedHashmap。</p><h1 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a><strong>TreeMap</strong></h1><p><img src="https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/r4mlQgzom8mBqxow/img/0ceb0cb8-4d62-4be8-b407-ff842fef6cef.tif" alt="img"></p><p>按照类继承关系，下面先介绍Map、SortedMap和NavigableMap的接口规范和方法约束，然后详细介绍TreeMap的方法实现。</p><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a><strong>Map</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map是一个将键映射到值的对象。映射不能包含重复的键；每个键最多可以映射到一个值。</span><br><span class="line">Map接口提供了三个集合视图，允许将Map的内容视为一组键、一组值或一组键值映射。Map的顺序定义为其集合视图上的迭代器返回其元素的顺序。一些Map实现，如TreeMap类，对它们的顺序做出了特定的保证；其他类（如HashMap类）则不然。</span><br></pre></td></tr></table></figure><p>上述截取自JDK官方对Map接口的注解翻译，Map主要是用来存放不重复的键以及其键-值唯一映射。Map接口规范没有约束按特定顺序存放元素和按序读取元素的能力。</p><h2 id="SortedMap"><a href="#SortedMap" class="headerlink" title="SortedMap"></a><strong>SortedMap</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SortedMap是一个进一步提供其键的总排序的Map。SortedMap是根据其键的自然顺序进行排序的，或者由通常在SortedMap创建时提供的比较器进行排序。当迭代SortedMap的集合视图（由entrySet、keySet和values方法返回）时，会反映出这种顺序。提供了几个额外的操作以利用有序能力。</span><br></pre></td></tr></table></figure><p>上述截取自SortedMap的官方注释，SortedMap提供了键的排序能力，以及一些方法来使用这个能力。下面先介绍接口规范再介绍提供的方法。</p><h3 id="接口规范"><a href="#接口规范" class="headerlink" title="接口规范"></a><strong>接口规范</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. 插入排序映射的所有键都必须实现Comparable接口（或被指定的comparator接受）。此外，所有这些键必须是相互可比较的：k1.compareTo（k2）（或comparator.compare（k1，k2））。</span><br></pre></td></tr></table></figure><p>第一点是SortedMap有序能力本质上需要依赖compareTo方法或者compare方法，因此键的类型必须实现Comparable接口或者被某个comparator接受。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2. 如果SortedMap要正确实现map接口，则SortedMap（无论是否提供显式比较器）维护的顺序必须与equals一致。这是因为Map接口是根据equals操作定义的，但SortedMap使用compareTo（或compare）方法执行键之间的比较，因此从SortedMap的角度来看，compareTo认为相等的两个键需要是equal的。（TreeMap行为是明确定义的，即使它的排序与等于不一致；它只是没有遵守Map接口的一般约定。）</span><br></pre></td></tr></table></figure><p>第二点是说SortedMap比较键值时使用的compareTo或compare方法需要与equals结果一致；这点Comparator接口里有更具体的规范：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(compare(x, y)==0) == (x.equals(y))</span><br></pre></td></tr></table></figure><p>这处约束主要是Map接口约束使用equals方法来判定键是否相同，SortedMap接口约束使用compare方法来比较两个键的顺序，而SortedMap是Map接口的扩展接口，因此需要遵循Map接口的约束，也即判断键是否相同这点两处需要保持一致；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3. 所有通用SortedMap实现类都应该提供四个“标准”构造函数。虽然接口不能指定必需的构造函数，但不可能强制执行此建议。所有SortedMap现的预期“标准”构造函数是：</span><br><span class="line">1)一个void（无参数）构造函数，它创建一个根据键的自然顺序排序的空SortedMap。</span><br><span class="line">2)具有Comparator类型的单个参数的构造函数，它创建一个根据指定的比较器排序的空SortedMap。</span><br><span class="line">3)具有Map类型的单个参数的构造函数，它创建一个新的映射，该映射具有与其参数相同的键值映射，并根据键的自然顺序进行排序。</span><br><span class="line">4)具有SortedMap类型的单个参数的构造函数，它创建一个新的SortedMap，其具有与输入SortedMap相同的键值映射和顺序。</span><br></pre></td></tr></table></figure><p>第三点约束是SortedMap接口对构造函数的要求，总结就是当参数里不指定特定的比较方法时，构造的对象需提供自然顺序排序的能力。</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a><strong>方法</strong></h3><p>SortedMap提供了一些方法利用到排序能力：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 指定键起止范围的子映射</span><br><span class="line">SortedMap&lt;K,V&gt; subMap(K fromKey, K toKey);</span><br><span class="line">// 从第一个键到指定键的子映射</span><br><span class="line">SortedMap&lt;K,V&gt; headMap(K toKey);</span><br><span class="line">// 从指定键到最后一个键的子映射</span><br><span class="line">SortedMap&lt;K,V&gt; tailMap(K fromKey);</span><br><span class="line">// 返回当前第一个键</span><br><span class="line">K firstKey();</span><br><span class="line">// 返回当前最后一个键</span><br><span class="line">K lastKey();</span><br></pre></td></tr></table></figure><h2 id="NavigableMap"><a href="#NavigableMap" class="headerlink" title="NavigableMap"></a><strong>NavigableMap</strong></h2><p>SortedMap提供的方法中对有序的利用能力局限在获取已知键大小范围对应的映射，而很多时候我们并不知道需要获取的键的具体大小， 只知道一个方向：比如我们想获得比指定key大的下一个元素；这时只用SortedMap定义的方法我们只能获取到最大的key，然后再使用subMap获取指定key和最大key之间的子映射，再遍历获得比指定key大的下一个元素。</p><p>NavigableMap是SortedMap的扩展接口，顾名思义提供了导航的能力，提供了获取指定方向的键值对的方法，返回给定搜索目标的最接近匹配项。</p><h3 id="接口规范-1"><a href="#接口规范-1" class="headerlink" title="接口规范"></a><strong>接口规范</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用导航方法扩展的SortedMap，返回给定搜索目标的最接近匹配项。方法lowerEntry、floorEntry、ceilingEntry和higherEntry返回Map。分别与小于、小于或等于、大于或等于和大于给定键的键关联的条目对象，如果没有这样的键，则返回null。类似地，lowerKey、floorKey、ceilingKey和higherKey方法只返回关联的键。所有这些方法都是为定位而设计的，而不是遍历条目。</span><br></pre></td></tr></table></figure><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a><strong>方法</strong></h3><p>NavigableMap新增的方法除了接口规范中已提及的还有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 返回对应的逆序集合</span><br><span class="line">NavigableMap&lt;K,V&gt; descendingMap();</span><br><span class="line">// 移除此时第一个元素并返回</span><br><span class="line">Map.Entry&lt;K,V&gt; pollFirstEntry();</span><br><span class="line">// 移除此时最后一个元素并返回</span><br><span class="line">Map.Entry&lt;K,V&gt; pollLastEntry();</span><br></pre></td></tr></table></figure><h2 id="TreeMap源码"><a href="#TreeMap源码" class="headerlink" title="TreeMap源码"></a><strong>TreeMap源码</strong></h2><p>TreeMap的有序能力基于红黑树（<a href="https://oi-wiki.org/ds/rbtree/%EF%BC%89%E5%AE%9E%E7%8E%B0%E3%80%82%E5%9B%A0%E6%AD%A4TreeMap%E7%9A%84%E5%85%83%E7%B4%A0%E6%8F%92%E5%85%A5%E3%80%81%E6%9F%A5%E6%89%BE%E5%92%8C%E5%88%A0%E9%99%A4%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%B8%BAO(log(n)">https://oi-wiki.org/ds/rbtree/）实现。因此TreeMap的元素插入、查找和删除的时间复杂度为O(log(n)</a>), 其中n为元素的个数。使用红黑树是因为相较于平衡树，红黑树不会因为插入和删除时追求绝对的平衡而过多的调整，最坏情况下也能保证在O（log n）的时间复杂度查找到某个节点。所以对于搜索、插入、删除操作较多的情况下，红黑树的效率是优于平衡二叉树的。【1】</p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a><strong>属性</strong></h3><h4 id="Entry类"><a href="#Entry类" class="headerlink" title="Entry类"></a><strong>Entry类</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">static final class Entry&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</span><br><span class="line">    K key;</span><br><span class="line">    V value;</span><br><span class="line">    Entry&lt;K,V&gt; left;</span><br><span class="line">    Entry&lt;K,V&gt; right;</span><br><span class="line">    Entry&lt;K,V&gt; parent;</span><br><span class="line">    boolean color = BLACK;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Make a new cell with given key, value, and parent, and with</span><br><span class="line">     * &#123;@code null&#125; child links, and BLACK color.</span><br><span class="line">     */</span><br><span class="line">    Entry(K key, V value, Entry&lt;K,V&gt; parent) &#123;</span><br><span class="line">        this.key = key;</span><br><span class="line">        this.value = value;</span><br><span class="line">        this.parent = parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TreeMap的Entry类作为元素类，除了基本的key、value之外，自身还作为一个节点包括了红黑树的节点信息：父节点、左右子节点和颜色布尔值。</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a><strong>其他</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 集合被修改的次数，使用iterator进行遍历时fail-fast使用</span><br><span class="line">private trans   </span><br><span class="line">// Red-black机制常量</span><br><span class="line">private static final boolean RED   = false;</span><br><span class="line">private static final boolean BLACK = true;ient int modCount = 0;</span><br><span class="line">// 根节点</span><br><span class="line">private transient Entry&lt;K,V&gt; root;</span><br><span class="line">// 维护顺序使用的比较器</span><br><span class="line">private final Comparator&lt;? super K&gt; comparator;</span><br></pre></td></tr></table></figure><h3 id="put方法"><a href="#put方法" class="headerlink" title="put方法"></a><strong>put方法</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">public V put(K key, V value) &#123;</span><br><span class="line">        Entry&lt;K,V&gt; t = root;</span><br><span class="line">        // 如果根节点为空</span><br><span class="line">        if (t == null) &#123;</span><br><span class="line">            // 检查插入的key是否为空</span><br><span class="line">            compare(key, key); // type (and possibly null) check</span><br><span class="line">            // 当前节点新建</span><br><span class="line">            root = new Entry&lt;&gt;(key, value, null);</span><br><span class="line">            size = 1;</span><br><span class="line">            modCount++;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        int cmp;</span><br><span class="line">        Entry&lt;K,V&gt; parent;</span><br><span class="line">        // split comparator and comparable paths</span><br><span class="line">        Comparator&lt;? super K&gt; cpr = comparator;</span><br><span class="line">        // 如果指定了比较器，则使用特定的比较方法</span><br><span class="line">        if (cpr != null) &#123;</span><br><span class="line">            do &#123;</span><br><span class="line">                parent = t;</span><br><span class="line">                // 比较待插入key和当前节点key的大小</span><br><span class="line">                cmp = cpr.compare(key, t.key);</span><br><span class="line">                // 如果待插入key小，往左子树遍历</span><br><span class="line">                if (cmp &lt; 0)</span><br><span class="line">                    t = t.left;</span><br><span class="line">                // 如果待插入key大，往右子树遍历</span><br><span class="line">                else if (cmp &gt; 0)</span><br><span class="line">                    t = t.right;</span><br><span class="line">                // 如果相等，说明key已存在则更新值</span><br><span class="line">                else</span><br><span class="line">                    return t.setValue(value);</span><br><span class="line">            &#125; while (t != null);</span><br><span class="line">        &#125;</span><br><span class="line">        // 没有指定比较器则使用键范型对应类型的默认比较方法</span><br><span class="line">        else &#123;</span><br><span class="line">            if (key == null)</span><br><span class="line">                throw new NullPointerException();</span><br><span class="line">            @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">                Comparable&lt;? super K&gt; k = (Comparable&lt;? super K&gt;) key;</span><br><span class="line">            do &#123;</span><br><span class="line">                parent = t;</span><br><span class="line">                cmp = k.compareTo(t.key);</span><br><span class="line">                if (cmp &lt; 0)</span><br><span class="line">                    t = t.left;</span><br><span class="line">                else if (cmp &gt; 0)</span><br><span class="line">                    t = t.right;</span><br><span class="line">                else</span><br><span class="line">                    return t.setValue(value);</span><br><span class="line">            &#125; while (t != null);</span><br><span class="line">        &#125;</span><br><span class="line">        // 遍历到待插入的位置时，初始化插入节点，进行插入</span><br><span class="line">        Entry&lt;K,V&gt; e = new Entry&lt;&gt;(key, value, parent);</span><br><span class="line">        if (cmp &lt; 0)</span><br><span class="line">            parent.left = e;</span><br><span class="line">        else</span><br><span class="line">            parent.right = e;</span><br><span class="line">        // 进入红黑树插入节点后的调整逻辑</span><br><span class="line">        fixAfterInsertion(e);</span><br><span class="line">        size++;</span><br><span class="line">        modCount++;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>TreeMap的put方法主要逻辑是就是红黑树的插入逻辑，包含两个阶段：</p><p>1）二叉搜索树的遍历方法，找到一个待插入位置并插入或更新（如果key已存在）；</p><p>2）插入后执行红黑树对应的调整逻辑；</p><p>先介绍几个概念：左旋、右旋</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/** From CLR */</span><br><span class="line">// 对节点p左旋包括三个操作，本质上也是三个节点的位置互换</span><br><span class="line">// 1. p的右子节点变为其右子节点的左子节点</span><br><span class="line">// 2. p原右子节点占据p现在的位置</span><br><span class="line">// 3. p的位置变为其原右子节点的左子节点</span><br><span class="line">private void rotateLeft(Entry&lt;K,V&gt; p) &#123;</span><br><span class="line">    if (p != null) &#123;</span><br><span class="line">        Entry&lt;K,V&gt; r = p.right;</span><br><span class="line">        p.right = r.left;</span><br><span class="line">        if (r.left != null)</span><br><span class="line">            r.left.parent = p;</span><br><span class="line">        r.parent = p.parent;</span><br><span class="line">        if (p.parent == null)</span><br><span class="line">            root = r;</span><br><span class="line">        else if (p.parent.left == p)</span><br><span class="line">            p.parent.left = r;</span><br><span class="line">        else</span><br><span class="line">            p.parent.right = r;</span><br><span class="line">        r.left = p;</span><br><span class="line">        p.parent = r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>右旋为对应的对称操作不再赘述。</p><p>然后看红黑树具体插入节点后的调整逻辑：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">/** From CLR */</span><br><span class="line">// 红黑树插入节点后的翻转+变色逻辑</span><br><span class="line">private void fixAfterInsertion(Entry&lt;K,V&gt; x) &#123;</span><br><span class="line">    // 插入节点首先设为红色</span><br><span class="line">    x.color = RED;</span><br><span class="line">    // 如果x的父节点为红色则可能需要翻转或变色</span><br><span class="line">    while (x != null &amp;&amp; x != root &amp;&amp; x.parent.color == RED) &#123;</span><br><span class="line">        // 如果x的父节点是x祖父节点的左节点</span><br><span class="line">        if (parentOf(x) == leftOf(parentOf(parentOf(x)))) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; y = rightOf(parentOf(parentOf(x)));</span><br><span class="line">            // 如果x的叔节点也为红色，那么换色：x的父节点和叔节点都换为黑色，祖父节点变为红色</span><br><span class="line">            if (colorOf(y) == RED) &#123;</span><br><span class="line">                setColor(parentOf(x), BLACK);</span><br><span class="line">                setColor(y, BLACK);</span><br><span class="line">                setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">                x = parentOf(parentOf(x));</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                // 若x叔节点为黑色且x是其父节点的右子节点</span><br><span class="line">                if (x == rightOf(parentOf(x))) &#123;</span><br><span class="line">                    // 那么需要对x的父节点进行左旋</span><br><span class="line">                    x = parentOf(x);</span><br><span class="line">                    rotateLeft(x);</span><br><span class="line">                &#125;</span><br><span class="line">                // x父节点变为黑色，x祖父节点变为红色，x祖父节点右旋</span><br><span class="line">                setColor(parentOf(x), BLACK);</span><br><span class="line">                setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">                rotateRight(parentOf(parentOf(x)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 若x的父节点为其祖父节点的右子节点，此时基本和上述做对称操作</span><br><span class="line">            Entry&lt;K,V&gt; y = leftOf(parentOf(parentOf(x)));</span><br><span class="line">            // 若x叔节点为红色，同样对祖父节点、父节点和叔节点换色</span><br><span class="line">            if (colorOf(y) == RED) &#123;</span><br><span class="line">                setColor(parentOf(x), BLACK);</span><br><span class="line">                setColor(y, BLACK);</span><br><span class="line">                setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">                x = parentOf(parentOf(x));</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                // 否则若x是其父节点的左子节点，则对齐父节点右旋</span><br><span class="line">                if (x == leftOf(parentOf(x))) &#123;</span><br><span class="line">                    x = parentOf(x);</span><br><span class="line">                    rotateRight(x);</span><br><span class="line">                &#125;</span><br><span class="line">                // x的父节点变为黑色，祖父节点变为红色，祖父节点左旋</span><br><span class="line">                setColor(parentOf(x), BLACK);</span><br><span class="line">                setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">                rotateLeft(parentOf(parentOf(x)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    root.color = BLACK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a><strong>LinkedHashMap</strong></h1><p><img src="https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/r4mlQgzom8mBqxow/img/6912f8b5-6382-4ca9-937d-53642f15cc0b.tif" alt="img"></p><p>按照类继承关系，LinkedHashMap继承自HashMap，LinkedHashMap相较于HashMap，除了支持按元素插入顺序遍历外，还支持按元素访问顺序遍历（LRU）。实现方法是在HashMap的基础上维护了双向链表的结构来存储节点（感觉和Redis的zset很像，也是维护了dict和skiplist两个数据结构）。</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a><strong>数据结构</strong></h2><p>HashMap由一个bucket数组组成，由于每个bucket在两种数据结构之间相互转换：链表和红黑树。链表由Node类实现，红黑树的节点则为TreeNode类。为了支持节点变为TreeNode后仍然能满足LinkedHashMap维护节点顺序的要求，TreeNode类也维护了两个前后节点的属性。具体的实现是通过在LinkedHashMap里定义一个维护了前后节点的类Entry，再让HashMap的TreeNode继承LinkedHashMap.Entry。【2】这篇文章里详细介绍了为何这样设计。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// bucket数组，必要时resize</span><br><span class="line">transient Node&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line">// 链表节点类，next标记链表的下一个节点</span><br><span class="line">static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</span><br><span class="line">    final int hash;</span><br><span class="line">    final K key;</span><br><span class="line">    V value;</span><br><span class="line">    Node&lt;K,V&gt; next;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 红黑树的节点类，同时标记了前置节点用于删除</span><br><span class="line"> */</span><br><span class="line">static final class TreeNode&lt;K,V&gt; extends LinkedHashMap.Entry&lt;K,V&gt; &#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; parent;  // red-black tree links</span><br><span class="line">    TreeNode&lt;K,V&gt; left;</span><br><span class="line">    TreeNode&lt;K,V&gt; right;</span><br><span class="line">    TreeNode&lt;K,V&gt; prev;    // needed to unlink next upon deletion</span><br><span class="line">    boolean red;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">// LinkedHashMap.Entry里增加了前后节点属性</span><br><span class="line">static class Entry&lt;K,V&gt; extends HashMap.Node&lt;K,V&gt; &#123;</span><br><span class="line">    Entry&lt;K,V&gt; before, after;</span><br><span class="line">    Entry(int hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        super(hash, key, value, next);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外，提供了布尔值来辅助按照访问顺序排序的能力。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 是否按访问顺讯排序</span><br><span class="line">   final boolean accessOrder;</span><br></pre></td></tr></table></figure><h2 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a><strong>方法</strong></h2><p>LinkedHashhmap关于元素的插入和删除方法都是在HashMap的基础上实现了定制的调整方法，访问方法则是完全重写。</p><h4 id="get"><a href="#get" class="headerlink" title="get"></a><strong>get</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 重写了get方法</span><br><span class="line">public V get(Object key) &#123;</span><br><span class="line">      Node&lt;K,V&gt; e;</span><br><span class="line">      if ((e = getNode(hash(key), key)) == null)</span><br><span class="line">          return null;</span><br><span class="line">      // 如果开启了按访问顺序排序，则调用afterNodeAccess访问后置方法</span><br><span class="line">      if (accessOrder)</span><br><span class="line">          afterNodeAccess(e);</span><br><span class="line">      return e.value;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>get方法重写后多了一个访问后置调整逻辑。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">void afterNodeAccess(Node&lt;K,V&gt; e) &#123; // move node to last</span><br><span class="line">    LinkedHashMap.Entry&lt;K,V&gt; last;</span><br><span class="line">    // 当前最新访问的节点并不是本次访问的节点，则进入调整逻辑</span><br><span class="line">    if (accessOrder &amp;&amp; (last = tail) != e) &#123;</span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; p =</span><br><span class="line">            (LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</span><br><span class="line">        // 调整总体记录：把当前节点放到尾节点作为最新访问的节点</span><br><span class="line">        // 当前节点的后置节点置空</span><br><span class="line">        p.after = null;</span><br><span class="line">        // 如果当前节点的原前置节点为空，则当前的节点的原后置节点变为首节点</span><br><span class="line">        if (b == null)</span><br><span class="line">            head = a;</span><br><span class="line">        else</span><br><span class="line">           // 否则原前置节点的后置节点变为原后置节点，相当于在原位置删除当前节点</span><br><span class="line">            b.after = a;</span><br><span class="line">        if (a != null)</span><br><span class="line">            a.before = b;</span><br><span class="line">        else</span><br><span class="line">            last = b;</span><br><span class="line">        // 把p放到末尾，如果当前尾节点为空，那么p既是头节点也是尾节点</span><br><span class="line">        if (last == null)</span><br><span class="line">            head = p;</span><br><span class="line">        else &#123;</span><br><span class="line">            p.before = last;</span><br><span class="line">            last.after = p;</span><br><span class="line">        &#125;</span><br><span class="line">        tail = p;</span><br><span class="line">        ++modCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在该访问后置逻辑中，做了把当前访问的节点放到尾节点作为最新访问节点的操作。</p><h4 id="put"><a href="#put" class="headerlink" title="put"></a>put</h4><p>put方法复用了HashMap的put方法，主要是调用putVal这个final方法，不一样的是LinkedHashMap重写了内部的afterNodeAccess和afterNodeInsertion 这两个后置方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">// 参数中的hash为key的hash方法值 </span><br><span class="line">final V putVal(int hash, K key, V value, boolean onlyIfAbsent,</span><br><span class="line">               boolean evict) &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;</span><br><span class="line">    // 当前数组为空则resize</span><br><span class="line">    if ((tab = table) == null || (n = tab.length) == 0)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    // 如果数组在当前hash取模位置为空，则新建一个节点放到数组中</span><br><span class="line">    if ((p = tab[i = (n - 1) &amp; hash]) == null)</span><br><span class="line">        tab[i] = newNode(hash, key, value, null);</span><br><span class="line">    else &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        // 如果key和取模位置的头节点的key相等，那么会做节点值更新操作</span><br><span class="line">        if (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        // 如果该处已是红黑树，那么直接调用红黑树插入方法</span><br><span class="line">        else if (p instanceof TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);</span><br><span class="line">        // 否则说明是链表结构，进行插入操作</span><br><span class="line">        else &#123;</span><br><span class="line">            for (int binCount = 0; ; ++binCount) &#123;</span><br><span class="line">                // 遍历到链表的最后节点</span><br><span class="line">                if ((e = p.next) == null) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, null);</span><br><span class="line">                    // 达到条件则将链表转换为红黑树</span><br><span class="line">                    if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st</span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                // 遍历到已存在的key则跳出遍历进行值更新操作</span><br><span class="line">                if (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">                    break;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // key已存在，进行值更新操作</span><br><span class="line">        if (e != null) &#123; // existing mapping for key</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            if (!onlyIfAbsent || oldValue == null)</span><br><span class="line">                e.value = value;</span><br><span class="line">            // 调用访问后置方法，将当前key放到双链表的尾节点作为最新访问节点</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            return oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    if (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    // 调用插入后置方法，LinkeHashMap已重写</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> LinkeHashMap重写了调用插入后置方法，通过插入后的双向链表调整来维护顺序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 参数evict标记当前数组是否处于create模式，true代表不处于</span><br><span class="line">// 插入了一个新元素，判断是否需要移除最久未访问的节点，如果需要则删除该节点</span><br><span class="line">void afterNodeInsertion(boolean evict) &#123; // possibly remove eldest</span><br><span class="line">    LinkedHashMap.Entry&lt;K,V&gt; first;</span><br><span class="line">    // removeEldestEntry默认为false，需要自己定义达到移除最老元素的条件并重写该方法</span><br><span class="line">    if (evict &amp;&amp; (first = head) != null &amp;&amp; removeEldestEntry(first)) &#123;</span><br><span class="line">        K key = first.key;</span><br><span class="line">        removeNode(hash(key), key, null, false, true);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法内removeEldestEntry默认为false，需要自己定义达到移除最老元素的条件并重写该方法，比如可以自定义LRU的条件。</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a><strong>引用</strong></h1><p>【1】<a href="https://zhuanlan.zhihu.com/p/621122622">https://zhuanlan.zhihu.com/p/621122622</a></p><p>【2】<a href="https://blog.csdn.net/shark_chili3007/article/details/107249595">https://blog.csdn.net/shark_chili3007/article/details/107249595</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概览&quot;&gt;&lt;a href=&quot;#概览&quot; class=&quot;headerlink&quot; title=&quot;概览&quot;&gt;&lt;/a&gt;&lt;strong&gt;概览&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;最近优化业务日志规范，我们定义了日志打点的数据结构是形如key-value结构，其中key是日志的业务语意</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://shengdoupi.github.io/2023/11/25/hello-world/"/>
    <id>http://shengdoupi.github.io/2023/11/25/hello-world/</id>
    <published>2023-11-25T11:02:04.136Z</published>
    <updated>2023-11-25T11:02:04.136Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
